
	wl[
	
		DI[

			autofac
			https://autofac.org/
			fakeiteasy
			https://fakeiteasy.readthedocs.io/en/stable/creating-fakes/
			automapper
			http://docs.automapper.org/en/stable/Getting-started.html
			fluentvalidation
			https://fluentvalidation.net/
			stylecop
			https://blog.submain.com/stylecop-detailed-guide/
			
		]
		
		
		diTestingInit[
			
            var builder = new ContainerBuilder();
            builder.RegisterModule(new CoreModule());
            builder.RegisterModule(new InstanceModule());
            builder.RegisterModule(new AutomapperModule());
			
		]
		
		mysql[		
		
			create table UserAddresses (UserId varchar(255),Email  varchar(255))			
			ALTER TABLE `useraddresses` CHANGE COLUMN `UserId` `UserId` VARCHAR(50) NULL DEFAULT NULL FIRST;
		
		]				
		
		mongoFilter[
			//Filter and
			ret = ret.Where(s => metricTypes.Contains(s.MetricType)).Intersect(ret).ToList();
			//Filter or
			filter.AddRange(ret.Where(s => metricTypes.Contains(s.MetricType)).ToList());
		]
		
		customBodyAttributes[
			https://weblog.west-wind.com/posts/2012/Aug/30/Using-JSONNET-for-dynamic-JSON-parsing
			https://www.dotnetcurry.com/aspnet-mvc/1368/aspnet-core-mvc-custom-model-binding
			https://blogs.msdn.microsoft.com/jmstall/2012/04/18/mvc-style-parameter-binding-for-webapi
			https://stackoverflow.com/questions/17645877/webapi-bind-from-both-uri-and-body
		]
		
		mongodbConcurency[
			Applications must ensure that only one thread at a time executes these operations in a client session.
			https://docs.mongodb.com/manual/core/causal-consistency-read-write-concerns/
			https://docs.mongodb.com/manual/faq/concurrency/
		]
		
		container[
			//container orchestration framework
			https://kubernetes.io/
			//alernate 
			Kubernetes,Mesos,Docker Swarm,Nomad,Mesosphere DC/OS
		]
		serviceBus[
			https://buoyant.io
			//sidecar
			https://linkerd.io/
		]
		service_mesh[
			https://istio.io/
		]
		msa[
			https://www.nginx.com/blog/nginmesh-nginx-as-a-proxy-in-an-istio-service-mesh/
			https://www.nginx.com/blog/what-is-a-service-mesh/
			https://www.nginx.com/blog/introducing-the-nginx-microservices-reference-architecture/
			https://www.nginx.com/blog/microservices-at-netflix-architectural-best-practices/
			https://docs.aws.amazon.com/aws-technical-content/latest/microservices-on-aws/characteristics-of-microservices.html
		]
		patterns[
			decomposition[
				sidecar proxy //sideckick
				https://docs.microsoft.com/en-us/azure/architecture/patterns/sidecar
				//ambassador
				https://docs.microsoft.com/en-us/azure/architecture/patterns/ambassador
				//circuit breaker
				https://docs.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker
				https://www.nginx.com/blog/microservices-reference-architecture-nginx-circuit-breaker-pattern/
			]
		]
	
		software[
			//mremoteNc manual
			https://github.com/mRemoteNG/mRemoteNG/wiki/User-Manual
			//db viewver
			https://www.heidisql.com/
			
		]	
		vs_issues[
			
			https://stackoverflow.com/questions/20358747/transformxml-task-could-not-be-loaded-from-microsoft-web-publishing-tasks-dll
			//http not found
			VisualStudioINstaller -> VS install Web net 4.7
			csproj -> UsingTask TaskName="TransformXml" -> \12\Web\ -> cahnge to -> v$(VisualStudioVersion)\Web\
			
			CannotEvaluateTypes[
				WHAT:
					cannot evalueate expression in debug mode
				WHEN: 
					debuging unit tests in multi projext solution
				HOW:
					check to on
					Tools->Options->Debugging->General->Use Managed Compatibility Mode
			]
			
		]
		guides[
			//postgres Firststeps
			https://www.postgresql.org/docs/8.3/static/app-postgres.html
			//mssql kill db
			https://dba.stackexchange.com/questions/2387/sql-server-cannot-drop-database-dbname-because-it-is-currently-in-use-but-n
			
			wireshark[
				https://www.howtogeek.com/104278/how-to-use-wireshark-to-capture-filter-and-inspect-packets/
				https://wiki.wireshark.org/
			]			
			
			cmd[
				https://www.getfilecloud.com/blog/2016/05/how-to-find-what-application-is-listening-on-a-tcpip-port-in-windows-using-netstat/#.W8BOvfZRWUk
				//serach process PID
				tasklist | findstr -ir ssms
				netstat -aon | more
				netstat -aon | more | findstr -ir 9996
			]
		
			git[
				https://git-scm.com/book/en/v2
				git_branching_strategies[
					//practice guy, new MS tutorials for Azure high grade
					https://docs.microsoft.com/en-us/azure/devops/repos/git/git-branching-guidance?view=vsts
					//straight to the point , main veriations
					https://www.javacodegeeks.com/2015/11/git-branching-strategies.html
					//multydev consistency rare detailed concept,colorfull chart,  Vincent Driessen
					https://nvie.com/posts/a-successful-git-branching-model/
					//reupgrade of Vincent Driessen matreial
					https://jp-lambert.me/git-gitflow-and-continuous-integration-for-dummies-5e4300148fbf
					//constructive critics of  Vincent Driessen
					https://github.com/petervanderdoes/gitflow-avh/issues/287				
					//atlassian guide for CI
					https://www.atlassian.com/continuous-delivery/continuous-delivery-workflows-with-feature-branching-and-gitflow
				]
				commands[
					git checkout -b <branch> --track <remote>/<branch>
					
					//move head 2 commits back
					git reset --hard HEAD~2
					
					//squash to commit other commits; 
					git rebase -i HEAD~2
					change peak to aquash
					
					//get hash of commit under head
					git rev-parse HEAD
					
					git rev-head 
					git checry-pick commitHash
				]

			]
					
		]
		jira[
			https://jira..ru/secure/ConfigureReport.jspa?startDateId=01%2F%D0%BE%D0%BA%D1%82%D1%8F%D0%B1%D1%80%D1%8C%2F2018&endDateId=31%2F%D0%BE%D0%BA%D1%82%D1%8F%D0%B1%D1%80%D1%8C%2F2018&jqlQueryId=&showWorklogCommentsId=true&selectedProjectId=11001&reportKey=com.synergyapps.plugins.jira.timepo-timesheet-plugin%3Atimesheet-report&%D0%94%D0%B0%D0%BB%D0%B5%D0%B5=%D0%94%D0%B0%D0%BB%D0%B5%D0%B5
		]
		sql[
			--seach tables by columnnames
			use MoscowVideoPreRelease;
			SELECT c.name  AS 'ColumnName'
			,t.name AS 'TableName'
			FROM        sys.columns c
			JOIN        sys.tables  t   ON c.object_id = t.object_id
			WHERE       c.name LIKE '%amera%' or c.name LIKE '%roup%'
			ORDER BY    TableName;
			
			tablespace[
				use MoscowVideoPreRelease;
				select t.name,    
				CAST(ROUND(((SUM(a.total_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS TotalSpaceMB
				 FROM sys.tables t
				INNER JOIN sys.indexes i ON t.OBJECT_ID = i.object_id
				INNER JOIN sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id
				INNER JOIN sys.allocation_units a ON p.partition_id = a.container_id
				where t.NAME ='tablename'
				group by t.name
			]
						
		]
		razor[
			attribute="@()"
		]
		source[
			//EmitMapper
			https://github.com/MetSystem/EmitMapper
		]		
		EF[
		
			https://medium.com/@hoagsie/youre-all-doing-entity-framework-wrong-ea0c40e20502
		
			https://docs.microsoft.com/en-us/nuget/tools/package-manager-console
			https://coding.abel.nu/2012/03/ef-migrations-command-reference/
			
			//expression trees
			https://blog.marcgravell.com/2008/10/express-yourself.html
			
			MIGRATE[
				enable-migrations				
				add-migration -ProjectName HP.CityMonitoring.IntegrationalTest -ConfigurationTypeName HP.CityMonitoring.IntegrationalTest IntegrationTestContextConfig
				Update-Database -ProjectName HP.ArchiveBalancingService.DAL -ConfigurationTypeName HP.ArchiveBalancingService.DAL.Migrations.Configuration -script
				
				//Update PSTGRE
				Update-Database -ConnectionStringName "Migrations_PSQL_2" -ConfigurationTypeName HP.ArchiveBalancingService.DAL.Migrations.Configuration -TargetMigration 201810180953103_SubtitlesAdd
			]

			codefirst[
				http://www.entityframeworktutorial.net/code-first/code-based-migration-in-code-first.aspx
			]
			
			nav_property[
				1-* - if exist change id, if not exist set property
				*-* - add to prop
			]
			
			REPO[
				using System;
				using System.Collections.Generic;
				using System.Data.Entity;
				using System.Linq;
				using System.Linq.Expressions;
				using System.Threading;
				using System.Threading.Tasks;
				using IF.MoscowVideo.Infrastructure.DAL.Models;
				using IF.MoscowVideo.Infrastructure.Extensions;
				using IF.MoscowVideo.Infrastructure.Extensions.ObjectExtensions;
				using IF.MoscowVideo.Infrastructure.Logs.Models;
				using IF.MoscowVideo.Infrastructure.Models;

				namespace IF.MoscowVideo.Common.Entity
				{
					/// <summary>
					/// Базовый класс репозитория.
					/// </summary>
					/// <typeparam name="T">Тип сущности.</typeparam>
					/// <typeparam name="TInterface">Интерфейс сущности.</typeparam>
					public abstract class CrudRepositoryBase<T, TInterface> : RepositoryBase<TInterface> where T : class, TInterface
					{
						/// <summary>
						/// Ctor.
						/// </summary>
						protected CrudRepositoryBase(DbContext objectContext)
							: base(objectContext)
						{
						}

						public override IQueryable<TInterface> GetAll()
						{
							return ObjectContext.Set<T>();
						}

						/// <summary>
						/// Создать новый экземпляр сущности.
						/// </summary>
						public virtual TInterface New()
						{
							return _objectContext.Set<T>().Create<T>();
						}

						/// <summary>
						/// Создать новый экземпляр сущности.
						/// </summary>
						public TOut New<TIn, TOut>()
							where TIn : class, TOut
						{
							return _objectContext.Set<TIn>().Create<TIn>();
						}

						/// <summary>
						/// Добавить экземпляр в набор.
						/// </summary>
						/// <param name="entity">Сущность для добавления.</param>
						public virtual void Add(IEnumerable<TInterface> entity)
						{
							_objectContext.Set<T>().AddRange(entity.Cast<T>());
						}

						/// <summary>
						/// Добавить экземпляр в набор.
						/// </summary>
						/// <param name="entity">Сущность для добавления.</param>
						public virtual void Add(TInterface entity)
						{
							_objectContext.Set<T>().Add((T)entity);
						}

						/// <summary>
						/// Обновить экремпляр в наборе.
						/// </summary>
						/// <param name="entity">Сущность для обновления.</param>
						[Obsolete]
						public virtual void Update(TInterface entity)
						{
							var ent = (T)entity;

							if (!Exists(ent))
							{
								_objectContext.Set<T>().Attach(ent);
							}
						}

						/// <summary>
						/// Удалить экземпляр сущности из набора.
						/// </summary>
						/// <param name="entity">Сущность для удаления.</param>
						public virtual void Delete(TInterface entity)
						{
							_objectContext.Set<T>().Remove((T)entity);
						}

						/// <summary>
						/// Удалить экземпляр сущности из набора.
						/// </summary>
						/// <param name="entity">Сущность для удаления.</param>
						public virtual void Delete(IEnumerable<TInterface> entity)
						{
							_objectContext.Set<T>().RemoveRange(entity.Cast<T>());
						}

						public virtual QueryResult<TInterface> Get(Query<TInterface> query)
						{
							var result = Get(query.Filter);
							return Paginate(result, query);
						}

						public virtual IQueryable<TInterface> Get(Expression<Func<TInterface, bool>> filter)
						{
							var result = _objectContext.Set<T>().AsQueryable();
							if (filter != null)
								result = result.Where(filter.ToConcreteType<T, TInterface>());
							return result;
						}

						/// <summary>
						/// Сохранить изменения.
						/// </summary>
						public virtual void SaveChanges()
						{
							_objectContext.SaveChanges();
						}

						public virtual async Task SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken))
						{
							await _objectContext.SaveChangesAsync(cancellationToken).ConfigureAwait(false);
						}

						protected virtual bool Exists(T ent)
						{
							try
							{
								return _objectContext.Set<T>().Local.Any(e => e == ent);
							}
							catch (Exception)
							{
								return true;
							}
						}

						protected static QueryResult<TInterface> Paginate(IQueryable<TInterface> entities, Query<TInterface> query)
						{
							var totalCount = entities.Count();

							if (query.Ordering != null)
								entities = query.Ordering.Apply(entities);

							if (query.Paging != null)
								entities = entities.Skip(query.Paging.CurrentPage * query.Paging.PageSize).Take(query.Paging.PageSize);

							return new QueryResult<TInterface>
							{
								Items = entities,
								TotalCount = totalCount
							};
						}

						public Dictionary<TE, Dictionary<string, string>> GetEntityPreviousValues<TE>(TE entity = null, string[] fieldNames = null)
						  where TE : class
						{
							var entitiesPreviousValues = new Dictionary<TE, Dictionary<string, string>>();
							var entrieChanges = GetEntrieChanges(entity);

							foreach (var camChanges in entrieChanges)
							{
								var entityPreviousValues = new Dictionary<string, string>();

								entitiesPreviousValues.Add(camChanges.Entity, entityPreviousValues);

								if (camChanges.State != EntityState.Modified)
									continue;

								if (fieldNames == null)
								{
									fieldNames = camChanges.Entity.ObjectToDictionary().Keys.ToArray();
								}

								foreach (string fieldName in fieldNames)
								{
									string original = camChanges.OriginalValues.PropertyNames.Contains(fieldName) ? camChanges.OriginalValues[fieldName]?.ToString() : "";
									string actual = camChanges.CurrentValues.PropertyNames.Contains(fieldName) ? camChanges.CurrentValues[fieldName]?.ToString() : "";

									if (original != actual && original != null && actual != null)
									{
										entityPreviousValues.Add(fieldName, original);
									}
								}
							}

							return entitiesPreviousValues.Where(h=>h.Value.Any()).ToDictionary(k=>k.Key, v=>v.Value);
						}
					}
				}
			]			
			
			DB_FIRST[
				edmx error 3007: delete from xml new created references with navigation properties 1 names
			]
			
			postgre[
				http://www.npgsql.org/ef6/
			]
			
		]
		powershell[
			get-executionpolicy
			get-help set-executionpolicy
			set-executionpolicy remotesigned
		]
		hashs[
			http://eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx#fnv
		]
		
		vs[
			//debugging source code
			https://blogs.msdn.microsoft.com/mcsuksoldev/2010/09/09/debugging-the-net-framework-source-code/
		]		
		reponew[
using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.Entity;
using System.Linq.Expressions;

namespace HP.ArchiveBalancingService.DAL.RepositoryNew
{
    public interface IRepositoryNew<K, T> where T : class
    {
        void BindContext(DbContext context);
        DbContext GetContext();

        T Add(T item);
        IQueryable<T> GetALL();
        IQueryable<T> GetTOP10();
        T GetByID(K id_);
        void AddCollection(List<T> items);
        void RemoveCollection(List<K> ids);
        void RemoveByID(K id_);
        IQueryable<T> GetByFilter(Expression<Func<T, bool>> expession);


        Expression<Func<T, bool>> WhereOR(Expression<Func<T, bool>> expression);
        Expression<Func<T, bool>> WhereAndAlso(Expression<Func<T, bool>> expression);
        IQueryable<T> GetByChainedFilter();


        T Update(T item, K id);
        void DeleteWhere(Expression<Func<T, bool>> exp_);
        IQueryable<T> SelectWhere(Expression<Func<T, bool>> exp_);
        IQueryable<T> Include<C>(Expression<Func<T, C>> exp_);
        void Save();
        bool IsUpdated(T item);
        void Dispose();
    }

}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Entity;
using HP.ArchiveBalancing.Common;

namespace HP.ArchiveBalancingService.DAL.RepositoryNew
{
   
    public class RepositoryNew<K,T> : IRepositoryNew<K,T> where T : class
    {
        bool disposed = false;

        public DbContext _context;

        Expression<Func<T, bool>> chainResult = null;

        public RepositoryNew()
        {

        }
        public RepositoryNew(DbContext context_)
        {
            this._context = context_;
        }
       
        public DbContext GetContext()
        {
            DbContext result = null;
            if (this._context != null)
            {
                result = this._context;
            }
            return result;
        }

        public void BindContext(DbContext context)
        {
            this._context = context;
        }
        public T Add(T item)
        {           
            try
            {
                this._context.Set<T>().Add(item);
            }
            catch (Exception e)
            {
                item = null;
                System.Diagnostics.Trace.WriteLine(e.Message);
            }
            return item;
        }
        public IQueryable<T> GetALL()
        {
            IQueryable<T> result = null;
            result = from s in this._context.Set<T>() select s;
            return result;
        }
        public IQueryable<T> GetTOP10()
        {
            IQueryable<T> result = null;
            try
            {
                result = (from s in this._context.Set<T>() select s).Take(10);
            }catch(Exception e)
            {
                System.Diagnostics.Trace.WriteLine(e.Message);
            }
            return result;
        }
        public T GetByID(K id_)
        {
            T result = null;
                result = this._context.Set<T>().Find(id_);
            return result;
        }
        public IQueryable<T> GetByFilter(Expression<Func<T, bool>> expession)
        {
            IQueryable<T> result = null;
            result = from s in this._context.Set<T>().Where(expession) select s;
            return result;
        }
        public IQueryable<T> GetByChainedFilter()
        {
            IQueryable<T> result = null;
            result = from s in this._context.Set<T>().Where(this.chainResult) select s;
            return result;
        }

        public Expression<Func<T, bool>> WhereOR(Expression<Func<T, bool>> expression)
        {
            if (chainResult == null)
            {
                chainResult = expression;
            }
            else
            {
                chainResult = chainResult.Or(expression);
            }
            return chainResult;
        }
        public Expression<Func<T, bool>> WhereAndAlso(Expression<Func<T, bool>> expression)
        {
            if (chainResult == null)
            {
                chainResult = expression;
            }
            else
            {
                chainResult = chainResult.AndAlso(expression);
            }
            return chainResult;
        }

        public void AddCollection(List<T> items)
        {
            this._context.Set<T>().AddRange(items);
        }
        
        public void RemoveCollection(List<K> ids)
        {
            try
            {
                foreach (K id in ids)
                {
                    this.RemoveByID(id);
                }
            }
            catch (Exception e)
            {
                System.Diagnostics.Trace.WriteLine(e.Message);
            }
        }

        public void RemoveByID(K id_)
        {
            try
            {
                T item = this._context.Set<T>().Find(id_);
                if (item != null)
                {
                    this._context.Set<T>().Remove(item);
                }
            }
            catch (Exception e)
            {
                System.Diagnostics.Trace.WriteLine(e.Message);
            }
        }
      
        public T Update(T item, K id)
        {
            T toUpdate = null;
            try
            {

                toUpdate = this._context.Set<T>().Find(id);
                this._context.Entry(toUpdate).CurrentValues.SetValues(item);                
            }
            catch (Exception e)
            {
                toUpdate = null;
                System.Diagnostics.Trace.WriteLine(e.Message);
            }

            return toUpdate;
        }
        public bool IsUpdated(T item)
        {
            return this._context.Entry(item).State == EntityState.Modified;
        }  
  

        public void Save()
        {
            try
            {
                this._context.SaveChanges();
            }catch(Exception e)
            {
                
            }
        }

        public IQueryable<T> SelectWhere(Expression<Func<T,bool>> exp_)
        {
            IQueryable<T> result = null;
                result = from s in this._context.Set<T>().Where(exp_) select s;
            return result;
        }
        public void DeleteWhere(Expression<Func<T, bool>> exp_)
        {        
            this._context.Set<T>().RemoveRange(this.SelectWhere(exp_));           
        }

        public IQueryable<T> Include<C>(Expression<Func<T, C>> exp_)
        {
            IQueryable<T> res = null;
            try
            {
                res = this._context.Set<T>().Include(exp_);
            }catch(Exception e)
            {
                System.Diagnostics.Trace.WriteLine(e.Message);
            }
            return res;
        }

        protected virtual void Dispose(bool value)
        {
            if (!this.disposed)
            {
                if (value)
                {
                    this._context.Dispose();

                }
            }
            this.disposed = true;
        }
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

    }

}
]		
		crudRepo[
		using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using IF.MoscowVideo.Infrastructure.DAL.Models;
using IF.MoscowVideo.Infrastructure.Extensions;
using IF.MoscowVideo.Infrastructure.Extensions.ObjectExtensions;
using IF.MoscowVideo.Infrastructure.Logs.Models;
using IF.MoscowVideo.Infrastructure.Models;

namespace IF.MoscowVideo.Common.Entity
{
    /// <summary>
    /// Базовый класс репозитория.
    /// </summary>
    /// <typeparam name="T">Тип сущности.</typeparam>
    /// <typeparam name="TInterface">Интерфейс сущности.</typeparam>
    public abstract class CrudRepositoryBase<T, TInterface> : RepositoryBase<TInterface> where T : class, TInterface
    {
        /// <summary>
        /// Ctor.
        /// </summary>
        protected CrudRepositoryBase(DbContext objectContext)
            : base(objectContext)
        {
        }

        public override IQueryable<TInterface> GetAll()
        {
            return ObjectContext.Set<T>();
        }

        /// <summary>
        /// Создать новый экземпляр сущности.
        /// </summary>
        public virtual TInterface New()
        {
            return _objectContext.Set<T>().Create<T>();
        }

        /// <summary>
        /// Создать новый экземпляр сущности.
        /// </summary>
        public TOut New<TIn, TOut>()
            where TIn : class, TOut
        {
            return _objectContext.Set<TIn>().Create<TIn>();
        }

        /// <summary>
        /// Добавить экземпляр в набор.
        /// </summary>
        /// <param name="entity">Сущность для добавления.</param>
        public virtual void Add(IEnumerable<TInterface> entity)
        {
            _objectContext.Set<T>().AddRange(entity.Cast<T>());
        }

        /// <summary>
        /// Добавить экземпляр в набор.
        /// </summary>
        /// <param name="entity">Сущность для добавления.</param>
        public virtual void Add(TInterface entity)
        {
            _objectContext.Set<T>().Add((T)entity);
        }

        /// <summary>
        /// Обновить экремпляр в наборе.
        /// </summary>
        /// <param name="entity">Сущность для обновления.</param>
        [Obsolete]
        public virtual void Update(TInterface entity)
        {
            var ent = (T)entity;

            if (!Exists(ent))
            {
                _objectContext.Set<T>().Attach(ent);
            }
        }

        /// <summary>
        /// Удалить экземпляр сущности из набора.
        /// </summary>
        /// <param name="entity">Сущность для удаления.</param>
        public virtual void Delete(TInterface entity)
        {
            _objectContext.Set<T>().Remove((T)entity);
        }

        /// <summary>
        /// Удалить экземпляр сущности из набора.
        /// </summary>
        /// <param name="entity">Сущность для удаления.</param>
        public virtual void Delete(IEnumerable<TInterface> entity)
        {
            _objectContext.Set<T>().RemoveRange(entity.Cast<T>());
        }

        public virtual QueryResult<TInterface> Get(Query<TInterface> query)
        {
            var result = Get(query.Filter);
            return Paginate(result, query);
        }

        public virtual IQueryable<TInterface> Get(Expression<Func<TInterface, bool>> filter)
        {
            var result = _objectContext.Set<T>().AsQueryable();
            if (filter != null)
                result = result.Where(filter.ToConcreteType<T, TInterface>());
            return result;
        }

        /// <summary>
        /// Сохранить изменения.
        /// </summary>
        public virtual void SaveChanges()
        {
            _objectContext.SaveChanges();
        }

        public virtual async Task SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            await _objectContext.SaveChangesAsync(cancellationToken).ConfigureAwait(false);
        }

        protected virtual bool Exists(T ent)
        {
            try
            {
                return _objectContext.Set<T>().Local.Any(e => e == ent);
            }
            catch (Exception)
            {
                return true;
            }
        }

        protected static QueryResult<TInterface> Paginate(IQueryable<TInterface> entities, Query<TInterface> query)
        {
            var totalCount = entities.Count();

            if (query.Ordering != null)
                entities = query.Ordering.Apply(entities);

            if (query.Paging != null)
                entities = entities.Skip(query.Paging.CurrentPage * query.Paging.PageSize).Take(query.Paging.PageSize);

            return new QueryResult<TInterface>
            {
                Items = entities,
                TotalCount = totalCount
            };
        }

        public Dictionary<TE, Dictionary<string, string>> GetEntityPreviousValues<TE>(TE entity = null, string[] fieldNames = null)
          where TE : class
        {
            var entitiesPreviousValues = new Dictionary<TE, Dictionary<string, string>>();
            var entrieChanges = GetEntrieChanges(entity);

            foreach (var camChanges in entrieChanges)
            {
                var entityPreviousValues = new Dictionary<string, string>();

                entitiesPreviousValues.Add(camChanges.Entity, entityPreviousValues);

                if (camChanges.State != EntityState.Modified)
                    continue;

                if (fieldNames == null)
                {
                    fieldNames = camChanges.Entity.ObjectToDictionary().Keys.ToArray();
                }

                foreach (string fieldName in fieldNames)
                {
                    string original = camChanges.OriginalValues.PropertyNames.Contains(fieldName) ? camChanges.OriginalValues[fieldName]?.ToString() : "";
                    string actual = camChanges.CurrentValues.PropertyNames.Contains(fieldName) ? camChanges.CurrentValues[fieldName]?.ToString() : "";

                    if (original != actual && original != null && actual != null)
                    {
                        entityPreviousValues.Add(fieldName, original);
                    }
                }
            }

            return entitiesPreviousValues.Where(h=>h.Value.Any()).ToDictionary(k=>k.Key, v=>v.Value);
        }
    }
}
		]


		architecture_patterns[
			https://towardsdatascience.com/10-common-software-architectural-patterns-in-a-nutshell-a0b47a1e9013
		]
		quartz[
			https://jayvilalta.com/blog/2014/06/04/understanding-the-disallowconcurrentexecution-job-attribute/
		]		
		liblist[
			https://topshelf.readthedocs.io/en/latest/#
			https://www.google.ru/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&ved=2ahUKEwjfypWdjZreAhWniKYKHTDBDnAQFjABegQICBAB&url=https%3A%2F%2Farchive.codeplex.com%2F%3Fp%3Demitmapper&usg=AOvVaw0_lHfeypLG9ciEL5wA0PCz
			
		]
		
		mapping[
			http://geekswithblogs.net/mrsteve/archive/2016/12/28/object-mapper-performance-comparison-allowpartiallytrustedcallers.aspx
		]
		
		emitmapper[
			
			https://blog.zwezdin.com/2013/emitmapper/
			
			//fake return with arguments 
			scroogeFake.GetSubtitlesStatus(Arg.Any<Guid>())
			.Returns<ScroogeClient.Responsess.ArchiveSubtitlesStatus>(archiveStatusInProgress);

			//emittmapper IGNORE
			protected override DefaultMapConfig Config
			{
			get
			{
				return base.Config
					.IgnoreMembers<DAL.Entities.ArchiveTask, BLL.Models.Subtitles.ArchiveTaskBO>(new[] {
						"Events"
					});
			}
			}

			//emittmapper CONSTRUCTSUING
			protected override DefaultMapConfig Config
			{
				get
				{
					return base.Config
						.ConstructBy<ArchiveTaskInfo>(
						() => {
								return new ArchiveTaskInfo() {

								};
							}
						);

						//.IgnoreMembers<ArchiveOrderInfo, ArchiveTaskInfo>(new[] {"Events"});
				}
			}
		]
		
		read[
			
			//web ppa recurrent
			https://haacked.com/archive/2011/10/16/the-dangers-of-implementing-recurring-background-tasks-in-asp-net.aspx/
		]
		
		Nuget[
		
//NUGET CLI
nuget list ArchiveBalancingService -Source http://10.178.3.70:99/nuget
nuget install HP.ArchiveBalancingService.DataContracts -SolutionDirectory C:\111\contracts -version 1.0.175

//pack package 
nuget pack C:\P\AR\HP.ArchiveService.DataContracts\HP.ArchiveBalancingService.DataContracts.csproj -OutputDirectory C:\111\contracts -version 1.0.175 -Properties Description=Release
C:\Users\i_neprintsev>nuget push C:\111\contracts\packages\HP.ArchiveBalancingService.DataContracts.1.0.175.nupkg -Source http://10.178.3.70:99

nuget setapikey P@ssw@rd -Source http://10.178.3.70:99/nuget

//CommandShell nuget
find-Package -Provider "http://10.178.3.70:99/nuget" -name "HP.ArchiveBalancingService.DataContracts" -RequiredVersion "1.0.136" 
install-Package -name "HP.ArchiveBalancingService.DataContracts" -RequiredVersion "1.0.174" -Scope CurrentUser
		
		]
		
		core [
					
			reference DLL
			[
			https://medium.com/@tonerdo/referencing-a-net-dll-directly-using-the-net-core-toolchain-16f0af46a4dc
			add to core.scproj
			
		  <ItemGroup>
			<Reference Include="MyAssembly">
			  <HintPath>HP.ArchiveBalancingService.DataContracts.dll</HintPath>
			</Reference>
		  </ItemGroup>
		  ]
		  
			dotnet
			[
				//EF
				dotnet add package Microsoft.EntityFrameworkCore --version 2.1.4 
				dotnet add package Microsoft.AspNetCore.Mvc.Core --version 2.1.3
				dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 2.1.4 
				
				//Configuration and json 
				dotnet add package Microsoft.Extensions.Configuration.FileExtensions --version 2.1.1 
				dotnet add package Microsoft.Extensions.Configuration.Json --version 2.1.1 
				
				dotnet restore
				
				https://docs.microsoft.com/ru-ru/ef/core/managing-schemas/migrations/
				dotnet ef migrations add initial
			]
			
		]
	
		nunitInstall[
		
			install-package NUnit.Runners -ProjectName HP.ArchiveBalancingService.Integration.MappingTest
			install-package NUnit.ConsoleRunner -ProjectName HP.ArchiveBalancingService.Integration.MappingTest
			install-package NUnit.Console -ProjectName HP.ArchiveBalancingService.Integration.MappingTest
			install-package NUnit.NUnit3TestAdapter -ProjectName HP.ArchiveBalancingService.Integration.MappingTest
			install-package NUnit.NUnitProjectLoader -ProjectName HP.ArchiveBalancingService.Integration.MappingTest
			install-package NUnit.NUnitTestAdapter -ProjectName HP.ArchiveBalancingService.Integration.MappingTest
			install-package NUnit.NUnit.Extension.NUnitV2Driver -ProjectName HP.ArchiveBalancingService.Integration.MappingTest
			install-package NUnit.Extension.NUnitV2ResultWriter -ProjectName HP.ArchiveBalancingService.Integration.MappingTest
			install-package NUnit.Runners.Net4 -ProjectName HP.ArchiveBalancingService.Integration.MappingTest
		
		]
						
		ONElinersCheck[
		
			/// <summary>
			/// Oneliners check. Null is OK but linq to object oneliners are performance kill
			/// </summary>
			public class OLNCheck{

				List<OnelinerCheck> ol = new List<OnelinerCheck> ();

				public void IntGO(){
				List<OnelinerCheck> ol = new List<OnelinerCheck> ();
				for(int i =0;i<10000;i++){
				ol.Add(new OnelinerCheck(){ID=i, Name="name_"+i});
				}

				Stopwatch stopWatch = new Stopwatch();		
				stopWatch.Start();
				foreach(OnelinerCheck o in ol){
					o.ID=Sum(o.ID);
				}
				stopWatch.Stop();
				TimeSpan perf0 = stopWatch.Elapsed;

				stopWatch.Start();
				ol.Select(s=>Sum(s.ID));
				stopWatch.Stop();
				TimeSpan perf1 = stopWatch.Elapsed;

				stopWatch.Start();
				ol.Select(SumO);
				stopWatch.Stop();
				TimeSpan perf2 = stopWatch.Elapsed;

				Console.WriteLine("Perf 0" + perf0);
				Console.WriteLine("Perf 1" + perf1);
				Console.WriteLine("Perf 2" + perf2);
				}

				public void NUllGO(){
				List<OnelinerCheck> ol = new List<OnelinerCheck> ();
				for(int i =0;i<100000;i++){
				ol.Add(new OnelinerCheck(){ID=i, Name="name_"+i});
				}

				Stopwatch stopWatch = new Stopwatch();		
				stopWatch.Start();
				foreach(OnelinerCheck o in ol){
					IncIf(o);
				}
				stopWatch.Stop();
				TimeSpan perf0 = stopWatch.Elapsed;

				stopWatch.Start();
				ol.Select(IncFF);
				stopWatch.Stop();
				TimeSpan perf1 = stopWatch.Elapsed;

				Console.WriteLine("Perf 0" + perf0);
				Console.WriteLine("Perf 1" + perf1);
				}

				private int Sum(int i){
				return ++i;
				}
				private OnelinerCheck SumO(OnelinerCheck i){
				i.ID++;
				return i;
				}

				private OnelinerCheck IncIf(OnelinerCheck o){
				if(o!=null){
				return o;
				}
				throw new ArgumentNullException(nameof(o));
				}
				private OnelinerCheck IncFF(OnelinerCheck o){
				return o = o ?? throw new ArgumentNullException(nameof(o));
				}

			}

		]
		
		LINQvsForEach[
			https://codereview.stackexchange.com/questions/14197/is-the-linq-version-faster-than-the-foreach-one
		]
		
		enumPattern[
		
			https://www.infoworld.com/article/3198453/c-sharp/how-to-implement-a-type-safe-enum-pattern-in-c.html
		
		]
		
		DDD[
			https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/ddd-oriented-microservice
			https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/microservice-domain-model
			https://www.infoq.com/articles/ddd-in-practice
		]
		
		sql[
			https://stackoverflow.com/questions/20542819/how-to-export-all-data-from-table-to-an-insertable-sql-format
		]
		
		rem[
			
			//radmin
			HP-HP000114 26.25.157.50
			job342234 q2w3
			
			//teamviewer
			HP-HP000114
			1 110 900 436 q2w3
			k9vh42
			
			ammy
			82 186 895
			89349
			10.225.164.176 ~ 10.200.239.62 
		]
		
		WCF[
		
			LargeFilesUpload[
				 <!--Bindding for large files upload. Valid for MTOM-->
				<binding maxBufferPoolSize="2147483647" maxBufferSize="2147483647" maxReceivedMessageSize="2147483647" messageEncoding="Text">
				  <readerQuotas maxDepth="2000000" maxStringContentLength="2147483647" maxArrayLength="2147483647" maxBytesPerRead="2147483647" maxNameTableCharCount="2147483647" />
				</binding>
			]
		]

		wireShark[
			//ui
			ip.addr==10.200.232.87
		]
		
		generateFormatsByteBits[
			//jpg 
			FFD8FFD
		]
		
		SOAPUI[
response xpath
//*:AddCategoryResponse/*:AddCategoryResult/*:Result
for 
[

<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">
   <s:Body>
      <AddCategoryResponse xmlns="http://tempuri.org/">
         <AddCategoryResult xmlns:a="http://schemas.datacontract.org/2004/07/IF.MoscowVideo.WebService.Core.ResultModels" xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
            <a:ErrorMessage i:nil="true"/>
            <a:Result>6f4efb43-24a2-4a76-9396-b9b7bbc43b94</a:Result>
            <a:Success>true</a:Success>
         </AddCategoryResult>
      </AddCategoryResponse>
   </s:Body>
</s:Envelope>
]

request xpath
//*:AddCategory/*:data/*:ParentId

for [
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tem="http://tempuri.org/" xmlns:if="http://schemas.datacontract.org/2004/07/IF.MoscowVideo.WebService.ApiServices.Utilities.DataModels" xmlns:arr="http://schemas.microsoft.com/2003/10/Serialization/Arrays">
   <soapenv:Header/>
   <soapenv:Body>
      <tem:AddCategory>
         <!--Optional:-->
         <tem:userId>4702DE72-04F2-454F-8176-2D0380305CFB</tem:userId>
         <!--Optional:-->
         <tem:data>
            <!--Optional:-->
            <if:Description>Desc</if:Description>
            <!--Optional:-->
            <if:Name>Name21</if:Name>
            <!--Optional:-->
                  <if:ParentId>6f4efb43-24a2-4a76-9396-b9b7bbc43b94</if:ParentId>
            <!--Optional:-->
            <if:ServiceTypeIds>
               <!--Zero or more repetitions:-->
               <arr:int>97</arr:int>
               <arr:int>126</arr:int>
			<arr:int>123</arr:int>

            </if:ServiceTypeIds>
         </tem:data>
      </tem:AddCategory>
   </soapenv:Body>
</soapenv:Envelope>
]
		
		]
		
		mvc[
			read picture 
			https://stackoverflow.com/questions/36135012/how-we-can-get-image-byte-from-other-website-by-uri-in-mvc-and-c
			//different partial view model
			https://stackoverflow.com/questions/22534224/asp-net-using-a-different-model-in-a-partial-view-than-in-its-parent
			//partial view update
			https://stackoverflow.com/questions/19392212/how-to-use-jquery-or-ajax-to-update-razor-partial-view-in-c-asp-net-for-a-mvc-p
			
		]
		
		async[
			
			http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html
			http://blog.stephencleary.com/2012/02/async-and-await.html
			https://msdn.microsoft.com/en-us/magazine/mt238404.aspx
			https://msdn.microsoft.com/en-us/magazine/jj991977.aspx
			
			https://stackify.com/csharp-async-await-task-performance/
			
			https://docs.microsoft.com/en-us/dotnet/framework/network-programming/asynchronous-server-socket-example
			
		]

		
		JS[

			guides
			[

				//modules
				https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc
				https://coryrylan.com/blog/javascript-module-pattern-basics
				//shorthandNotations
					https://www.sitepoint.com/shorthand-javascript-techniques/
				//codding best practce
					https://blog.risingstack.com/javascript-clean-coding-best-practices-node-js-at-scale/
				
				//class composition
					https://alligator.io/js/class-composition/
				//dragNdrop
					https://medium.com/quick-code/simple-javascript-drag-drop-d044d8c5bed5
					http://interactjs.io/			
				//pagex layerx screenx
				https://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y
				[
				
					pageX/Y gives the coordinates relative to the <html> element in CSS pixels.
					clientX/Y gives the coordinates relative to the viewport in CSS pixels.
					screenX/Y gives the coordinates relative to the screen in device pixels.
						
					offsetX/Y relative to layer
				]
				
				//good practices 
				https://www.w3.org/wiki/JavaScript_best_practices
				//find event listeners 
				https://stackoverflow.com/questions/446892/how-to-find-event-listeners-on-a-dom-node-when-debugging-or-from-the-javascript
				
				//ajaxPartialViewResult //partial view update
				https://stackoverflow.com/questions/19392212/how-to-use-jquery-or-ajax-to-update-razor-partial-view-in-c-asp-net-for-a-mvc-p
				
				//draggable
				https://www.w3schools.com/howto/howto_js_draggable.asp
				
				
			]
			
			code
			[

				dragNdrop[
					
					js[
						// Dragndrop.InitManyToOne("camera-title","dragNdrop");
						var Dragndrop = (function () {

						var dropped ={}

						var dragged = null;

						function initManyToOne(dragFromClassName, dragToId) {
						var froms = document.getElementsByClassName(dragFromClassName);

						[].forEach.call(froms,function(s){
						s.addEventListener("mouseenter",mouseenter);

						s.addEventListener("mouseover",mouseover);
						s.addEventListener("mousedown",mousedown);
						s.addEventListener("mousmove",mousmove);
						s.addEventListener("mouseup",mousedown);

						s.addEventListener("dragstart",dragstart);
						});

						var item = document.getElementById(dragToId);
						item.addEventListener("dragover", dragover)
						item.addEventListener("dragenter", dragenter)
						item.addEventListener("drop", drop)
						};

						function mouseenter(e){
						console.log("mouseenter")
						console.log(e)
						};
						function mouseover(e){
						console.log("mouseover")
						console.log(e)
						};
						function mousedown(e){
						console.log("mousedown")
						console.log(e)
						};
						function mousmove(e){
						console.log("mousmove")
						console.log(e)
						};
						function mouseup(e){
						console.log("mouseup")
						console.log(e)
						};

						function dragover(e) {
						console.log("dragover")
						e.preventDefault()
						};

						function dragenter(e) {
						console.log("dragenter");
						console.log(e);
						e.preventDefault();
						};

						function dragstart(e) {
						console.log("dragstart");
						console.log(e);
						dragged=e.target;
						5};

						function drop(v) {
						console.log("drop");
						console.log(v);

						dropped.Name = dragged.innerText;
						dropped.X = v.offsetX;
						dropped.Y = v.offsetY;
						console.log(v)
						console.log(dropped);
						console.log(dragged);
						};

						return {
						DragOver: function (v) {
						dragover(v);
						},
						DragEnter: function (v) {
						dragenter(v);
						},
						Drop: function (v) {
						drop(v);
						},
						InitManyToOne: function (from,to) {
						initManyToOne(from,to);
						}
						}
						})();

					]
					
					html[
						<!DOCTYPE html>
						<head>

						<script src="popper.min.js"></script>

						<!-- Latest compiled and minified CSS -->
						<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">

						<!-- jQuery library -->
						<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

						<!-- Latest compiled JavaScript -->
						<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>


						<script src="js_.js"></script>

						<link rel="stylesheet" type="text/css" href="bootstrap.css">
						<link rel="stylesheet" type="text/css" href="geopos.css">
						<link rel="stylesheet" type="text/css" href="jstree.css">

						</head>
						<body>
						<div id="dragNdrop" class="container">
						<div>
						<a class="jstree_href" href="">Внуковское</a>
						<a class="jstree_href camera-title jstree_href" href="">RecGRZ_ZAO_239_197_1</a>
						<a class="jstree_href camera-title jstree_href" href="">RecGRZ_ZAO_239_197_2</a>
						<a class="jstree_href camera-title jstree_href" href="">RecGRZ_ZAO_239_197_3</a>
						</div>
						<div class="editblock">
						<img class="plan" src="http://www.tu-varna.bg/tu-varnalib/images/images/plan-shema.jpg" />
						</div>
						</div>

						</body>

					
					]
									
				]
				
				DOM[
				
					htmlattr[
						//style
						object.style.zIndex = "auto|number|initial|inherit" 
						//classanme GET,SET
						document.getElementById("myDIV").className = "mystyle";
						//classlist 
						document.getElementById("myDIV").classList.add("mystyle");
						.contains() .remove() .toggle()
						//get css selectorss
						var x = document.querySelectorAll(".example");
						https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll
						
					]
					
				]
								
				//template strings
				`text${variable}"text in quotes"`
								
				add_remove_eventListener[
					// Attach an event handler to <div>
					document.getElementById("myDIV").addEventListener("mousemove", myFunction);

					// Remove the event handler from <div>
					document.getElementById("myDIV").removeEventListener("mousemove", myFunction); 
				]
												
			]
			
			js_modules
			[

				//with module pattern
				var GeoPositionJS = (function () {    

					var test = function () {
						console.log("Tested")
					};

					var testP = function (p) {
						console.log(p);
					};

					return {
						testGet: test,
						testGetP : testP
					}

				})();

				//object interface pattern
				var GeoPositionInt= (function () {
					
					return {
						testGet : function () {
							console.log("Tested")
						},

						testGetP : function (p) {
							console.log(p);
						},
					}

				})();

				
				//call from Razor view
				<script>
					$(function () {

						//check module pattern OK
						//console.log(GeoPositionJS);
						GeoPositionJS.testGet();
					GeoPositionJS.testGetP("test log");

					//check object interface OK
					//console.log(GeoPositionInt);
					GeoPositionInt.testGet();
					GeoPositionInt.testGetP("test log");
			
				   
				});
				</script>

			]
			
			libs
			[
				//drag ndrop
				https://shopify.github.io/draggable/docs/
				https://github.com/Shopify/draggable/tree/master/src/Draggable
				
				//json graph edit
				https://gojs.net/latest/samples/stateChart.html
			]

		]
		
	]
