
	wl[
	
				
		EF[
											
			//nav_property
			1-* - if exist change id, if not exist set property
			*-* - add to prop
			
		]
	
		REPO[
			using System;
			using System.Collections.Generic;
			using System.Data.Entity;
			using System.Linq;
			using System.Linq.Expressions;
			using System.Threading;
			using System.Threading.Tasks;
			using IF.MoscowVideo.Infrastructure.DAL.Models;
			using IF.MoscowVideo.Infrastructure.Extensions;
			using IF.MoscowVideo.Infrastructure.Extensions.ObjectExtensions;
			using IF.MoscowVideo.Infrastructure.Logs.Models;
			using IF.MoscowVideo.Infrastructure.Models;

			namespace IF.MoscowVideo.Common.Entity
			{
				/// <summary>
				/// Базовый класс репозитория.
				/// </summary>
				/// <typeparam name="T">Тип сущности.</typeparam>
				/// <typeparam name="TInterface">Интерфейс сущности.</typeparam>
				public abstract class CrudRepositoryBase<T, TInterface> : RepositoryBase<TInterface> where T : class, TInterface
				{
					/// <summary>
					/// Ctor.
					/// </summary>
					protected CrudRepositoryBase(DbContext objectContext)
						: base(objectContext)
					{
					}

					public override IQueryable<TInterface> GetAll()
					{
						return ObjectContext.Set<T>();
					}

					/// <summary>
					/// Создать новый экземпляр сущности.
					/// </summary>
					public virtual TInterface New()
					{
						return _objectContext.Set<T>().Create<T>();
					}

					/// <summary>
					/// Создать новый экземпляр сущности.
					/// </summary>
					public TOut New<TIn, TOut>()
						where TIn : class, TOut
					{
						return _objectContext.Set<TIn>().Create<TIn>();
					}

					/// <summary>
					/// Добавить экземпляр в набор.
					/// </summary>
					/// <param name="entity">Сущность для добавления.</param>
					public virtual void Add(IEnumerable<TInterface> entity)
					{
						_objectContext.Set<T>().AddRange(entity.Cast<T>());
					}

					/// <summary>
					/// Добавить экземпляр в набор.
					/// </summary>
					/// <param name="entity">Сущность для добавления.</param>
					public virtual void Add(TInterface entity)
					{
						_objectContext.Set<T>().Add((T)entity);
					}

					/// <summary>
					/// Обновить экремпляр в наборе.
					/// </summary>
					/// <param name="entity">Сущность для обновления.</param>
					[Obsolete]
					public virtual void Update(TInterface entity)
					{
						var ent = (T)entity;

						if (!Exists(ent))
						{
							_objectContext.Set<T>().Attach(ent);
						}
					}

					/// <summary>
					/// Удалить экземпляр сущности из набора.
					/// </summary>
					/// <param name="entity">Сущность для удаления.</param>
					public virtual void Delete(TInterface entity)
					{
						_objectContext.Set<T>().Remove((T)entity);
					}

					/// <summary>
					/// Удалить экземпляр сущности из набора.
					/// </summary>
					/// <param name="entity">Сущность для удаления.</param>
					public virtual void Delete(IEnumerable<TInterface> entity)
					{
						_objectContext.Set<T>().RemoveRange(entity.Cast<T>());
					}

					public virtual QueryResult<TInterface> Get(Query<TInterface> query)
					{
						var result = Get(query.Filter);
						return Paginate(result, query);
					}

					public virtual IQueryable<TInterface> Get(Expression<Func<TInterface, bool>> filter)
					{
						var result = _objectContext.Set<T>().AsQueryable();
						if (filter != null)
							result = result.Where(filter.ToConcreteType<T, TInterface>());
						return result;
					}

					/// <summary>
					/// Сохранить изменения.
					/// </summary>
					public virtual void SaveChanges()
					{
						_objectContext.SaveChanges();
					}

					public virtual async Task SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken))
					{
						await _objectContext.SaveChangesAsync(cancellationToken).ConfigureAwait(false);
					}

					protected virtual bool Exists(T ent)
					{
						try
						{
							return _objectContext.Set<T>().Local.Any(e => e == ent);
						}
						catch (Exception)
						{
							return true;
						}
					}

					protected static QueryResult<TInterface> Paginate(IQueryable<TInterface> entities, Query<TInterface> query)
					{
						var totalCount = entities.Count();

						if (query.Ordering != null)
							entities = query.Ordering.Apply(entities);

						if (query.Paging != null)
							entities = entities.Skip(query.Paging.CurrentPage * query.Paging.PageSize).Take(query.Paging.PageSize);

						return new QueryResult<TInterface>
						{
							Items = entities,
							TotalCount = totalCount
						};
					}

					public Dictionary<TE, Dictionary<string, string>> GetEntityPreviousValues<TE>(TE entity = null, string[] fieldNames = null)
					  where TE : class
					{
						var entitiesPreviousValues = new Dictionary<TE, Dictionary<string, string>>();
						var entrieChanges = GetEntrieChanges(entity);

						foreach (var camChanges in entrieChanges)
						{
							var entityPreviousValues = new Dictionary<string, string>();

							entitiesPreviousValues.Add(camChanges.Entity, entityPreviousValues);

							if (camChanges.State != EntityState.Modified)
								continue;

							if (fieldNames == null)
							{
								fieldNames = camChanges.Entity.ObjectToDictionary().Keys.ToArray();
							}

							foreach (string fieldName in fieldNames)
							{
								string original = camChanges.OriginalValues.PropertyNames.Contains(fieldName) ? camChanges.OriginalValues[fieldName]?.ToString() : "";
								string actual = camChanges.CurrentValues.PropertyNames.Contains(fieldName) ? camChanges.CurrentValues[fieldName]?.ToString() : "";

								if (original != actual && original != null && actual != null)
								{
									entityPreviousValues.Add(fieldName, original);
								}
							}
						}

						return entitiesPreviousValues.Where(h=>h.Value.Any()).ToDictionary(k=>k.Key, v=>v.Value);
					}
				}
			}
		]			
	
		crudRepo[
		
			using System;
			using System.Collections.Generic;
			using System.Data.Entity;
			using System.Linq;
			using System.Linq.Expressions;
			using System.Threading;
			using System.Threading.Tasks;
			using IF.MoscowVideo.Infrastructure.DAL.Models;
			using IF.MoscowVideo.Infrastructure.Extensions;
			using IF.MoscowVideo.Infrastructure.Extensions.ObjectExtensions;
			using IF.MoscowVideo.Infrastructure.Logs.Models;
			using IF.MoscowVideo.Infrastructure.Models;

			namespace IF.MoscowVideo.Common.Entity
			{
			/// <summary>
			/// Базовый класс репозитория.
			/// </summary>
			/// <typeparam name="T">Тип сущности.</typeparam>
			/// <typeparam name="TInterface">Интерфейс сущности.</typeparam>
			public abstract class CrudRepositoryBase<T, TInterface> : RepositoryBase<TInterface> where T : class, TInterface
			{
			/// <summary>
			/// Ctor.
			/// </summary>
			protected CrudRepositoryBase(DbContext objectContext)
				: base(objectContext)
			{
			}

			public override IQueryable<TInterface> GetAll()
			{
				return ObjectContext.Set<T>();
			}

			/// <summary>
			/// Создать новый экземпляр сущности.
			/// </summary>
			public virtual TInterface New()
			{
				return _objectContext.Set<T>().Create<T>();
			}

			/// <summary>
			/// Создать новый экземпляр сущности.
			/// </summary>
			public TOut New<TIn, TOut>()
				where TIn : class, TOut
			{
				return _objectContext.Set<TIn>().Create<TIn>();
			}

			/// <summary>
			/// Добавить экземпляр в набор.
			/// </summary>
			/// <param name="entity">Сущность для добавления.</param>
			public virtual void Add(IEnumerable<TInterface> entity)
			{
				_objectContext.Set<T>().AddRange(entity.Cast<T>());
			}

			/// <summary>
			/// Добавить экземпляр в набор.
			/// </summary>
			/// <param name="entity">Сущность для добавления.</param>
			public virtual void Add(TInterface entity)
			{
				_objectContext.Set<T>().Add((T)entity);
			}

			/// <summary>
			/// Обновить экремпляр в наборе.
			/// </summary>
			/// <param name="entity">Сущность для обновления.</param>
			[Obsolete]
			public virtual void Update(TInterface entity)
			{
				var ent = (T)entity;

				if (!Exists(ent))
				{
					_objectContext.Set<T>().Attach(ent);
				}
			}

			/// <summary>
			/// Удалить экземпляр сущности из набора.
			/// </summary>
			/// <param name="entity">Сущность для удаления.</param>
			public virtual void Delete(TInterface entity)
			{
				_objectContext.Set<T>().Remove((T)entity);
			}

			/// <summary>
			/// Удалить экземпляр сущности из набора.
			/// </summary>
			/// <param name="entity">Сущность для удаления.</param>
			public virtual void Delete(IEnumerable<TInterface> entity)
			{
				_objectContext.Set<T>().RemoveRange(entity.Cast<T>());
			}

			public virtual QueryResult<TInterface> Get(Query<TInterface> query)
			{
				var result = Get(query.Filter);
				return Paginate(result, query);
			}

			public virtual IQueryable<TInterface> Get(Expression<Func<TInterface, bool>> filter)
			{
				var result = _objectContext.Set<T>().AsQueryable();
				if (filter != null)
					result = result.Where(filter.ToConcreteType<T, TInterface>());
				return result;
			}

			/// <summary>
			/// Сохранить изменения.
			/// </summary>
			public virtual void SaveChanges()
			{
				_objectContext.SaveChanges();
			}

			public virtual async Task SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken))
			{
				await _objectContext.SaveChangesAsync(cancellationToken).ConfigureAwait(false);
			}

			protected virtual bool Exists(T ent)
			{
				try
				{
					return _objectContext.Set<T>().Local.Any(e => e == ent);
				}
				catch (Exception)
				{
					return true;
				}
			}

			protected static QueryResult<TInterface> Paginate(IQueryable<TInterface> entities, Query<TInterface> query)
			{
				var totalCount = entities.Count();

				if (query.Ordering != null)
					entities = query.Ordering.Apply(entities);

				if (query.Paging != null)
					entities = entities.Skip(query.Paging.CurrentPage * query.Paging.PageSize).Take(query.Paging.PageSize);

				return new QueryResult<TInterface>
				{
					Items = entities,
					TotalCount = totalCount
				};
			}

			public Dictionary<TE, Dictionary<string, string>> GetEntityPreviousValues<TE>(TE entity = null, string[] fieldNames = null)
			  where TE : class
			{
				var entitiesPreviousValues = new Dictionary<TE, Dictionary<string, string>>();
				var entrieChanges = GetEntrieChanges(entity);

				foreach (var camChanges in entrieChanges)
				{
					var entityPreviousValues = new Dictionary<string, string>();

					entitiesPreviousValues.Add(camChanges.Entity, entityPreviousValues);

					if (camChanges.State != EntityState.Modified)
						continue;

					if (fieldNames == null)
					{
						fieldNames = camChanges.Entity.ObjectToDictionary().Keys.ToArray();
					}

					foreach (string fieldName in fieldNames)
					{
						string original = camChanges.OriginalValues.PropertyNames.Contains(fieldName) ? camChanges.OriginalValues[fieldName]?.ToString() : "";
						string actual = camChanges.CurrentValues.PropertyNames.Contains(fieldName) ? camChanges.CurrentValues[fieldName]?.ToString() : "";

						if (original != actual && original != null && actual != null)
						{
							entityPreviousValues.Add(fieldName, original);
						}
					}
				}

				return entitiesPreviousValues.Where(h=>h.Value.Any()).ToDictionary(k=>k.Key, v=>v.Value);
			}
			}
			}

		]
		
		//architecture patterns
		https://towardsdatascience.com/10-common-software-architectural-patterns-in-a-nutshell-a0b47a1e9013
		
		mapping[
			http://geekswithblogs.net/mrsteve/archive/2016/12/28/object-mapper-performance-comparison-allowpartiallytrustedcallers.aspx
			emitmapper[
			
			https://blog.zwezdin.com/2013/emitmapper/
			
			//fake return with arguments 
			scroogeFake.GetSubtitlesStatus(Arg.Any<Guid>())
			.Returns<ScroogeClient.Responsess.ArchiveSubtitlesStatus>(archiveStatusInProgress);

			//emittmapper IGNORE
			protected override DefaultMapConfig Config
			{
			get
			{
				return base.Config
					.IgnoreMembers<DAL.Entities.ArchiveTask, BLL.Models.Subtitles.ArchiveTaskBO>(new[] {
						"Events"
					});
			}
			}

			//emittmapper CONSTRUCTSUING
			protected override DefaultMapConfig Config
			{
				get
				{
					return base.Config
						.ConstructBy<ArchiveTaskInfo>(
						() => {
								return new ArchiveTaskInfo() {

								};
							}
						);

						//.IgnoreMembers<ArchiveOrderInfo, ArchiveTaskInfo>(new[] {"Events"});
				}
			}
		]
		
		]		

	]
