
js
[
	//date string by format
	date.toLocaleDateString(options?);
	//date to UTC date
	date.UTC	
	
	rxjs
	[

		debounceTime(delayTime)
			-> handle only one action in burst

		takeUntil (observable)
			-> emits until observable action emits

		subject.subscribe(receiver)
		sibject.next(val) -> receiver(val){val...}

		observable
				single|miltiple
		pull function iterator
		push promise observable

		Subjects o- multicast observable

	]
	
	angular
	[
		
		//piped parameter
		<div>{{'Var.VarName' | PipeName }}</div>
		[attr]="'Var.VarName' | PipeName"
		
	]
	
]

sql
[

	search_object[

		SELECT DISTINCT
			OBJECT_SCHEMA_NAME(sc.[object_id]) [name], 
			so.[type] [type],
			OBJECT_NAME(sc.[object_id]) [object_name]
		FROM
			sys.sql_modules sc
		INNER JOIN
			sys.objects so on so.object_id = sc.object_id
		WHERE
			sc.definition LIKE '%ObjectName%'
	]
	
	maintanance[
		//column rename
		EXEC sp_rename 'Sales.SalesTerritory.TerritoryID', 'TerrID', 'COLUMN';
	]
	
]

sysadmining
[

	nuget[
	 <config>
		<add key="http_proxy" value="proxyUrl" />
		<add key="https_proxy" value="proxyUrl" />
	  </config>
	]

]

c#[
	
	core[
	
		EF[
			
			migrationCommands[
				dotnet ef migrations add MigrName --context CtxName
				dotnet ef database update --context CtxName
			]
			
			contextFromScratchInitialization[
			
				using( NewOrderContext context 
					= new NewOrderContext(new DbContextOptionsBuilder<NewOrderContext>()
					.UseSqlServer(connectionString).Options))
				{}
				
			]
			
			https://docs.microsoft.com/en-us/ef/core/modeling/relationships
			https://www.entityframeworktutorial.net/efcore/fluent-api-in-entity-framework-core.aspx			
			FluentAPI[
			
				/*Mark key */
				builder.Entity<AddressDAL>().HasKey(s=>s.Id);
				
				/*rename property */
				//builder.Entity<AddressDAL>().Property(s => s.Id).HasColumnName("AddressId");

				/*Rename table */
				builder.Entity<RouteVertexDAL>().ToTable("RouteVertex");

				/* Generate value in db*/
				builder.Entity<AddressDAL>().Property(s => s.Id).ValueGeneratedOnAdd();
				
				
				customForeignKey[
				
					model[
						[Table("TestDicTwo", Schema = "dic")]
						public class TestDicTwo
						{
							[Key]
							[Column("Id")]
							public int Id { get; set; }

							[Column("Comment")]
							public string Comment { get; set; }

							[Column("NumValue")]
							public int? NumValue { get; set; }

							[Column("DateValue")]
							public DateTime? DateValue { get; set; }



							/*Collection navigation property*/
							public List<TestDicOne> DicsOne { get; set; }
						}

						[Table("TestDicOne", Schema = "dic")]
						public class TestDicOne
						{
							[Key]
							[Column("Id")]
							public int Id { get; set; }

							[Column("Comment")]
							public string Comment { get; set; }

							[Column("NumValue")]
							public int? NumValue { get; set; }

							[Column("DateValue")]
							public DateTime? DateValue { get; set; }



							/*Foreign key*/
							//[Column("IdTwo")]
							public int IdTwo { get; set; }        
							/*Reference navigation property*/
							public TestDicTwo DicTwo { get; set; }

						}
					]
				
					OnModelCreating[
					
						/*Custom foreign key name violating convention*/
						modelBuilder.Entity<TestDicOne>()
							.HasOne(p => p.DicTwo)
							.WithMany(p => p.DicsOne)
							.HasForeignKey(k => k.IdTwo);
						
						/*Custom foreign key naming*/
						modelBuilder.Entity<TestDicOne>().Property(p => p.IdTwo).HasColumnName("IdDicTwo");
					
					]
				
				]
			
			]
		
		]
	
	]

]

