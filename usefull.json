uf[	
	
	TODO[
	
		code[
			job[
				mv[
					-> react to mv integrate
				]
			]
			
			projs[
				-> MSA template
				{
					DDD 
					sql(ms,postgre),nosql(mongo,neo4j),amqp(rabbit+netservicebus,masstransit),
					cashing(reddis)
					
					front
					PWA progressive web app
					(angular,react,vue)
					(graphql vs REST,?mongoose)
					(?rendering,?testing)
					
				}
			]
		]
		
		arrange[
			-> sort actual
			-> sort unsorted of watchlist
			-> core projs arrange
				-> checkers - make base for sandbox code tamplates
				-> mvcWebPackGulpReact - gulp webpack configs and view/model decomposition
					-> mvcBulkOverall2 extendes mvcWebPackGulpReact
				-> mvcCoreCheck - core vies, partial views
				-> leafletBulkSandbox - leaflet SB
				-> mvcReactReduxCheck - event bus
				
			-> js projs rearrange 
				-> move all to folders in js SandBoxCodeTemplates
					-> leaflet_boat.js,leaflet_boatmarker.js - rotatable leaflet marker
					-> leaflet_pretty.js - leaflet pretty
					-> mapbox_pretty.js - mapbox pretty
					-> requireJsCheck - require js 
					-> modulesCheck - js modules for node 
					-> mapboxCheck, leafletCheck - map frameworks native checkers
					-> leaflet - leaflet ?working with cameras
					-> jstree - js utilities
					-> hw - js utility code
					-> BOXbundle,geoposPlanPictureOld - drag n drop partly logic
					-> boatMarkerCheck - leaflet boat plugin 
				
			no particular intrest core folder - 
				mvcWebpckGulpCheck, mvcWebPackCheck, mvcReactCheck, mvcGulpCheck
				
			no particular intrest js folder - 
				webpackCheck
		]

	]	
	
	mv[
		//js modeules in view init
		var app = new HP.MoscowVideo.Modules.GeopositionTreeConfig.default();
		app.Init();
	]	
	
	npm[

		//react,webpack,babel
		cmd[	
		
			npm install --save react
			npm install --save redux
			npm install --save react-redux
			npm install --save react-dom

			npm install --save-dev webpack

			npm install --save-dev @babel/preset-react
			npm install --save-dev @babel/preset-env 

			npm install --save-dev @babel/plugin-proposal-class-properties		
			npm install --save @babel/polyfill
			npm install --save-dev @babel/core @babel/cli @babel/preset-env
			//>>> babel 7 is crusial
			npm i babel-loader@7 -D
			
			npm install -D babel-loader @babel/core @babel/preset-env webpack
			npm install -D @babel/core @babel/preset-env webpack
			
			npm audit fix
			
			//hot load
			npm install --save-dev html-webpack-plugin
			npm install webpack-dev-server --save-dev			
			npm install --save-dev clean-webpack-plugin
			npm install --save-dev react-hot-loader
			npx webpack-dev-server --hotOnly
			
			//hot rebuild
			npx webpack --watch
			
			//show references
			npx npm-why babel/core 
		]
		
		
	]
		
	cs[
		
				//caller member name attribute
		https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.callermembernameattribute?view=netframework-4.7.2
		
		CollectionInterfaces[
		
			//iqueriable vs ienumerable
			https://developerhandbook.com/entity-framework/in-the-spotlight-demystifying-iqueryable-entity-framework-6/		
			//ienumerable
			https://danielwertheim.se/c-someenum-tostring-measured-to-be-400x-slower/
			
			https://medium.com/@kunaltandon.kt/ienumerable-vs-icollection-vs-ilist-vs-iqueryable-in-c-2101351453db

			IList<T>:ICollection<T>:IEnumerable<T>
			IQueriable<T>;IEnumerable<T>

			IEnumerable<T>
			Filtering
			Fucnt<T,bool>

			ICollection<T>
			Add,remove,update
			Count - O(1)

			IList<T>
			insert,remove


			IQueriable<T>
			Expression<Funct<T,bool>>
			
		]
		
		list[
			.sort[
				https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.sort?redirectedfrom=MSDN&view=netframework-4.7.2#System_Collections_Generic_List_1_Sort
				
				O (n log n) on avarage
				O (n2) in worst case
				
				< 16 elem -> insertion sort
				> 2 log n (n inpt arr length) -> heapsort alg
				-> quicksort
				unstable -> not preserve equal item order
				
			]
			
			.addRange[
				
				if count+ > count cur -> rellocating to new arr
				
				if cann add without capacity increase O(n)
				
				else O(n + m) m- added, n - count
				
			]
			
			.contains-> linear search O(n)
			.convertAll -> linear search O(n)			
			.find -> linear search O(n)
		]
		//
		https://cpratt.co/async-tips-tricks/
					
		https://sharplab.io/#v2:C4LgTgrgdgNAJiA1AHwAIAYAEqCMBuAWACgNt9jTcAWQkrXAOgBkBLKAR1spwYBUBTAB7Au9HAFZaFAMxkAbNgBMZAOzEA3sQCQqWbgWoqmALIBDNgAoAlJqKZ7mHTgCcFgESQoUfnDdXaDoEm/AC2AOJgpgAOABYMYQDy1gEOAL7EgcTpRDLySsHhkbGYtpl2Drp5hpiJ1rZaWgBupmCYppgAvJjeAO6YCQBGAFb8AMbAANoAuuo4MIow0qmYKUGYza0Dnd38fWyTM3MLSysZa5hnawCSUADOUWPADMahAPZgAJ4R0TEWpjADfyXTDZbJAA
		
		sharplab[
			
			basicMemgraphProg
			{
			
				using System;
				using System;
				using System.Collections.Generic;
				using System.Linq;
				using System.Text;
				using System.Threading.Tasks;

				public static class Program
				{
					public static void Main(){
						Console.WriteLine("runned");
						MemGraph.GO();
					}
					
				}

				public static class MemGraph {
					
					public static void GO(){
						var a = new Object[]{1,2,3} ;
						var b = new int[]{1,2,3} ;
						
						Inspect.MemoryGraph(a,b);
					}
				}
			
			}

		]
				
		IEnumerableICollectionILst[
			https://medium.com/@kunaltandon.kt/ienumerable-vs-icollection-vs-ilist-vs-iqueryable-in-c-2101351453db
				IEnumerable{- no crud,no count + Filter,enumerate}
				ICollection
				{
				count O(1), + enumerate,count,filter,crud
					generates Func<T,bool>
				}
				IList{:Ienumerable + :ICollection + insert in the middle ?O(n)}
				IQueryable{
					:ICollection
					generates Expression<Func<T,bool>>
				}
				
			IenumerablevsIlist[
				https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/guidelines-for-collections
				https://stackoverflow.com/questions/1072614/should-i-always-return-ienumerablet-instead-of-ilistt
			]
		]
		
		async[
			
			https://www.codingame.com/playgrounds/4240/your-ultimate-async-await-tutorial-in-c/structure-of-async-await
			https://medium.com/quick-code/react-quick-tip-use-class-properties-and-arrow-functions-to-avoid-binding-this-to-methods-29628aca2e25
			https://medium.com/bynder-tech/c-why-you-should-use-configureawait-false-in-your-library-code-d7837dce3d7f
			https://msdn.microsoft.com/en-us/magazine/gg598924.aspx
			
			https://weblogs.asp.net/dixin/understanding-c-sharp-async-await-1-compilation
			https://docs.microsoft.com/en-us/dotnet/standard/async-in-depth
			https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/guidelines-for-collections
			https://devblogs.microsoft.com/dotnet/new-features-in-c-7-0/
			https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap
			https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm
			https://devblogs.microsoft.com/dotnet/async-in-4-5-worth-the-await/
			https://docs.microsoft.com/en-us/ef/ef6/fundamentals/async
			
			//https://stackoverflow.com/questions/13489065/best-practice-to-call-configureawait-for-all-server-side-code
			ConfigureAwait(false) in classic asp.net in UI context
			not saves thread jumps, saves context request
			
			
			//useable only in parallel request, TPL better
			
			//cannot be tested in .net console
			//test from .net web api UI
			never user ...Async.Result() -> synch way, deadlock in asp.net WEB API
			
			APM
			EAP
			TAP,TPL
		]
		
		EFquering[
			https://docs.microsoft.com/en-us/ef/ef6/fundamentals/async
		]
		
		Core [
		
				core_module_load[
					!!!
					if app exports default
					then on index new via default
					references
					
					//react aggregate root
					//renders final comp
					GameBoard.jsx
					{		
						import * as React from 'react'

						export default class GameTutorial {
							 ReactDOM.render(
						}
					}
					
					//aggregate root for webpack
					//imports all modules
					app.js
					{
						import { GameTutorial } from '../ReactTutorial/Containers/GameBoard'			
						
						export class App 
					}
					
					//endpoint for builded packs
					index.cshtml[
						<script src="~/dist/wp/reactGame.bundle.js" type="text/javascript"></script>
						
						 let rg = new reactGame.App();
						<script>
						  let rg = new reactGame.App();
						  rg.Init();
						</script>
					]
					
				]
				//ef CORE LOGGING
				http://rion.io/2016/10/19/accessing-entity-framework-core-queries-behind-the-scenes-in-asp-net-core/
			]
			
			vsCode_EF_update[
				dotnet ef migrations add LocalExpress --context sbDbEntities
				dotnet ef database update --context sbDbEntities
			]
			
			tipsNtricks[
			{} //<------ Adding a Nop allows a breakpoint here.
			]	
			
			.NET_tools_locations[

			C:\Windows\Microsoft.NET\Framework64\v4.0.30319
			ilasm -> C# source code to IL
			nGen.exe -> IL to CPU source generator
			
			C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.7.2 Tools
			ildasm.exe -> IL to C# source code
			PEVerify -> verifies assembly on unsafe codes
			
			]
		]
		
		https://the-eye.eu/public/Books/IT%20Various/LINQ%20Quickly.pdf
		https://elacademico.files.wordpress.com/2009/11/manning-linq-in-action-jan-2008-19339881691.pdf
		https://the-eye.eu/public/Books/IT%20Various/C%23%20in%20Depth%2C%202nd%20Edition.pdf
		http://sd.blackball.lv/library/CLR_via_CSharp_(Jeffrey_Richter_4th_Edition).pdf
		//readonly
		https://codeblog.jonskeet.uk/2014/07/16/micro-optimization-the-surprising-inefficiency-of-readonly-fields/
		https://softwareengineering.stackexchange.com/questions/132747/is-having-public-constants-bad
		public readonly goes to backed into referenced assemblies
		
		https://csharpindepth.com/Articles/PropertiesMatter
		//async 
		https://jeremybytes.blogspot.com/2015/01/task-and-await-basic-exception-handling.html
			 

	]
	
	js[
		
		reactRedux[
			
			react_boilerplate_guideline
			[
			
				- new webpack app entry
				- new js for entry
				- new view,controller
				- on appJs 
					//import from JSX
					import HelloMessage from './Templates/hellomessage';
					init method above react render
				- import bundle in view
					init [webpackAppName].[appClass].[init function wrapper for reactdom]
				
			]
		
			react[
	
		reactComps[
		
			Container Component
				<- Presentation Component[
					const t = (props) => (<tag>{}<tag/>);
				]
			Container Component <- Redux store
		]
		
		Syntax
		[

			//pass props
			<Template propName={propParent}>

			tpl connect(mapStateToPropsmmapEventsToProps)(Template)
			<div>
				<tpl/>
			<div/>

			
			//https://reactjs.org/docs/events.html
			onClickCapture -> register event in capture phase
			
		]
	
		stateFlow[
			componentDidMount() -> runs after constructor
				componentWillUnmount <- runs when comp removed from DOM
				//https://reactjs.org/docs/state-and-lifecycle.html
				setState -> Indirect, async, merge
					-> //indirect
					setState({objProp:value}) instead this.state.objProp = value
					->//async
					// Wrong
						this.setState({
						  counter: this.state.counter + this.props.increment,
						});
						// Correct
						this.setState((state, props) => ({
						  counter: state.counter + props.increment
						}));
						// Correct
						this.setState(function(state, props) {
						  return {
							counter: state.counter + props.increment
						  };
						});
					-> //merged
						componentDidMount() {
							fetchPosts().then(response => {
							  this.setState({
								posts: response.posts
							  });
							});

							fetchComments().then(response => {
							  this.setState({
								comments: response.comments
							  });
							});
						}
				
				-> pass state as props to child component
		]
		
		templates[
		
			Conditional component nesting
			ContainerBoilerplate
			PresentationBoilerplate
			...get from reactreduxcore
			
			ConditionalNestedComponent
			[

				methodA()
				{
					<div>Element</div>
					{methodB(condition)}
				}
				methodB(cond)
				{
					if(cond){
						return(
							<div>Conditional element</div>
						)
					}
				}			

			]
			
			
		
		]
		
		react -> local state (forms, UI)
			redux -> global state (cach users, post draft )
			
			
		Container Component
			<- Presentation Component[
				const t = (props) => (<tag>{}<tag/>);
			]
		Container Component <- Redux store
		
		//validation 
		https://reactjs.org/docs/typechecking-with-proptypes.html
		
		//usage with react
		https://redux.js.org/basics/usage-with-react
		
						
		overall
		[

			//pass props
			<Template propName={propParent}>

			tpl connect(mapStateToPropsmmapEventsToProps)(Template)
			<div>
				<tpl/>
			<div/>
			
		]
		
		ContainerBoilerplate
		[
			
			import * as React from 'react'
			import * as ReactDOM from 'react-dom'

			import Tag from '../Presentation/tag'

			export default class TagsContainer extends React.Component {
				constructor(props) {
					super(props);
					
					this.handleClick = this.handleClick.bind(this);
					
				}

				handleClick(e){
					console.log(e);
				}

				render() {
					return (
						<Tag tag='h1' className="cl1" >Header One
								<Tag tag='div' className="cl2">Tag two
								</Tag>
							<Tag tag='div' type="button" className="btn btn-primary" onClick={this.handleClick}>Button bootstrap</Tag>
							<Tag tag='button' onClick={this.handleClickAnother}>Button html</Tag>
						</Tag>
					);
				}

				//initilaize
				init(domId) 
				{
					ReactDOM.render(
						<TagsContainer />,
						document.getElementById(domId)
					);
				}
			}
			
		]
		
		presentationBoilerplate
		[
			
			jsx[
			
				import * as React from 'react';
				import PropTypes from 'prop-types';

				const ButtonHtml = (props) => (
					<input key={props.index} className={props.cssclass} onClick={props.oninputfunc} value={props.text}/>
				);

				ButtonHtml.propTypes = {
					cssclass: PropTypes.string,

					index: PropTypes.number.isRequired,

					oninputfunc: PropTypes.func,
					text: PropTypes.string
				};

			]
			
			tag_js[
			
				import * as React from 'react'

				export default class Tag extends React.Component {
					render() {
						return React.createElement(this.props.tag, this.props, this.props.children);
					}
				}

			]

		]
		
		
		render(
			<componentClassName [variableName=""]/>,
			selector 
			//document.getElementById('id')
		);

		funcs[
		
			this.props.name -> receive name variable passed to component

			this.state -> {object for internal state}
			
			componentDidMount() -> runs after constructor
			componentWillUnmount <- runs when comp removed from DOM
			//https://reactjs.org/docs/state-and-lifecycle.html
			setState -> Indirect, async, merge
				-> //indirect
				setState({objProp:value}) instead this.state.objProp = value
				->//async
				// Wrong
					this.setState({
					  counter: this.state.counter + this.props.increment,
					});
					// Correct
					this.setState((state, props) => ({
					  counter: state.counter + props.increment
					}));
					// Correct
					this.setState(function(state, props) {
					  return {
						counter: state.counter + props.increment
					  };
					});
				-> //merged
					componentDidMount() {
						fetchPosts().then(response => {
						  this.setState({
							posts: response.posts
						  });
						});

						fetchComments().then(response => {
						  this.setState({
							comments: response.comments
						  });
						});
					}
			
			-> pass state as props to child component
			
			setTimeout -> postpone activation
			
			//conditional component nestion
			{this.state.isToggleOn ? 'ON' : 'OFF'}
				
			//https://reactjs.org/docs/events.html
			onClickCapture -> register event in capture phase
			
			//https://reactjs.org/docs/handling-events.html
			-> () lambda functions instead of bind do extra re-render when passed to child
			
			//https://reactjs.org/docs/forms.html
			-> form
			this.setState({value: event.target.value});
			//partial form update
			this.setState({
				[name]: value
			});
			
			//https://reactjs.org/docs/lifting-state-up.html
			-> lifting state up
				pass method from parent to child prop childPropName={parentHandlerFunc}
				call child prop this.props.childPropName
			
			//Overal component logic
			container -> no html; contains wrapping <div>; data and behaviour to presentation; render;
			presentation -> only render and very simple logic;
							
		]
		
		toread[
			react components
			[
				https://blog.bitsrc.io/11-react-component-libraries-you-should-know-178eb1dd6aa4
				http://react-toolbox.io/#/components/time_picker
				https://react-bootstrap.github.io/layout/grid/
				https://material-ui.com/demos/lists/
				https://v2.grommet.io/accordion
			]
		]
		
		ConditionalNestedComponent
		[

			methodA()
			{
				<div>Element</div>
				{methodB(condition)}
			}
			methodB(cond)
			{
				if(cond){
					return(
						<div>Conditional element</div>
					)
				}
			}			

		]

		
		css_libs[
				//gourmet
				https://v2.grommet.io/accordion
			]					
!!!action input signature must correspond to default reducer initialization

	]
			
			redux[

				import { Provider } from 'react-redux'
				import store from './redux/store'
				
				subscribe to store
					true: subscribe to the values that mapStateToProps extracts from the store, 
						and re-render only when those values have changed
					false: not re-render when the store changes
					
				inject action creators 
					true: receive all of the action creators you inject with mapDispatchToProps 
						as props and automatically dispatch the actions upon being called
					false: receive props.dispatch that you may use to manually dispatch action
				
				funcs[
					(state, action) => state

					function ctr(state,action){
						switch(action.props){

						}
					}
					
					//subscribe,dispatch,getState
					const red = combineReducers({ctr,ctr2})
					store = createStore(ctr);
						optional->createStore(combineReducers,initialState,applyMiddleware)
					str.subscribe()			
					str.dispatch({action.Prop:val})
					
					//connect(mapToProps,mapToState)(Component)
				]
				
				https://blog.isquaredsoftware.com/presentations/workshops/redux-fundamentals/ui-layer.html#/4
				BasicUIintegration
				[
				
					// 1) Create a store
					const store = Redux.createStore(counter)

					// 2) Subscribe to store updates
					store.subscribe(render);

					const valueEl = document.getElementById('value');

					// 3. When the subscription callback runs:
					function render() {
						// 3.1) Get the current store state
						const state = store.getState();

						// 3.2) Extract the data you want
						const newValue = state.toString();

						// 3.3) Update the UI with the new value
						valueEl.innerHTML = newValue;
					}

					// 4) Display the UI with the initial store state
					render();

					// 5) Dispatch actions based on UI inputs
					document.getElementById("increment")
						.addEventListener('click', () => {
							store.dispatch({type : "INCREMENT"});
						})
				]
				
			]
				
			react+redux_impl [
			
				npm install --save react
				npm install --save redux
				npm install --save react-redux
				
				flow[
					-> map props in action to object, map props from object to state in reducer
					
					view -[action]-> dispatcher -> store -> view

					view-[action]->store
					state = reducer(state,action);

					store -> createStore(),dispatch(), getState()
					this.state -> store.getState();
				]
				
				binding[
				
					//binding from container -> presentation
					<TextBox oninputfunc={this.textchangedaction} text={this.state.initialText}/>
					//binding from createStore
					oninputfunc: (e) => {
						dispatch(TextChangedWithValue(e.target.value));
					}
					//in presentation component props value
					onChange={props.oninputfunc} value={props.text}
					
				]
				
				folder_shema[

					presentation -> container -> redux [
						action, action creators, connect
					]
					reducer(state,acton) => state from switch 
					store (action) => actrion from reducer
					
					//
					index.js -> entry point with create store , render, provider tag
					//redux
					/actions -> action classes
					/reducers -> const (state,action) => switch
					/reducers/index.js -> combineReducers
					//react + redux
					/presentation -> presentations const t =() => {}, validation
					/continers -> mapStateToProps , mapDispatchToProps,
						connect(mapStateToProps , mapDispatchToProps)(PresentationComp)

				]
				
				patterns_shema[

					presentation -> 

					cnontainer -> 
						mapState{map state to props}
						mapDispatch{map events to actions}
						const ComponentNew = connect(mapState,mapDispatch)(Component);
						export default connect({Component})(ComponentNew)
							
						const App = () => (
						  <div>
							<ComponentNew />
							<OtherComponents />
						  </div>
						);

					actionType ->
						actionBuilder
						reducer(state,action){switch}

					const reducerForStore = combineReducers({
					  propNameOne: reducerOne,
					  propNameTwo: reducerTwo,
					});

					const store = createStore(reducerForStore);

					import{ Provider } from'react-redux';
					const WrappedApp = () => (
					  <Provider store={store}>
						<App />
					  </Provider>
					);

				]
				
				sample[
									
					import React from 'react';
					import uuid from 'uuid';
					import { createStore, combineReducers } from 'redux';
					import { Provider, connect } from 'react-redux';

					presentation.action

					mapStateToProps -> binds state props to presentation props
					mapDispatchTorops -> binds presentation action to action type

					const ThreadTabs = connect(
					  mapStateToProps,
				
					mapDispatchTorops
					)(presentation);

					container

					//connect results to app with tags
					const App = () => (
					  <div className='ui segment'>
						<ThreadTabs />  
					  </div>
					);

					//app to redux wrapper
					const WrappedApp = () => (
					  <Provider store={store}>
						<App />
					  </Provider>
					);

					//export wrapperapp
					export default WrappedApp;

				]
			
			]
			
		]
		
		
		shorthands[
			//ternary
			if..else
			let v = c ? x :
			//shortcircuit
			//!(if c null,undefined,'',0)
			let v = c || x;
			//decl shrt 
			let x,y,z =3;
			//if(truthy)
			//if(!truthy)
			//arrays 
			for(let i of arr)
			//fucnt shrothands
			f = p => console.log("val",p);
			setTimeout(() => console.log("val"),1000);
			arr.forEach(s=>console.log(s));
			//implicit return
			f2 = p => ( p); 
			//default param
			f3 = (p0,p1=1,p2="a") => ((p0*p1)+p2); //f3(2) =>"2a"
			//template str
			let p0 ="Var";
			let c0=`a${p0}`; //console.log(c0); => aVar
			//destructuring
			let p = {v0:"v0",v2:"v02",v4:"v4"}		
			let {v0,v2,v4} = p
			//rest syntax
			let a0 = [1,2,3];
			let b0 = [...a0];
			a0[2]=10;
			let c0 = [a0,b0]
			console.log(a0) => [1, 2, 10]
			console.log(b0) => [1, 2, 3]
			console.log(c0) => {[],[]}
			//map,foreach,filter
			let arr1 = [{v:"v0",n:"n0"},{v:"v1",n:"n1"},{v:"v2",n:"n2"},{v:"v2"}];		
			function f3(arr,pred){
				let ret=[];
				arr.forEach(s => {						
					if(pred(s)){
						ret.push(s);
					}
				});
				console.log(ret)
				
				let ret2=[];
				ret2=arr.map(s => {						
					if(pred(s)){
						return s;
					}else{return null;}
				});
				console.log(ret2)
				
				let ret3;
				ret3=arr.filter(pred);
				console.log(ret3);
			}		
			f3(arr1,s=>s.v==="v0" || typeof s.n==='undefined')
			//Math.floor(4.9)
			~~4.9
			
		]
		
		
		code[
		
			//map,foreach,filter
			[
				let arr1 = [{v:"v0",n:"n0"},{v:"v1",n:"n1"},{v:"v2",n:"n2"},{v:"v2"}];		
				function f3(arr,pred){
					let ret=[];
					arr.forEach(s => {						
						if(pred(s)){
							ret.push(s);
						}
					});
					console.log(ret)
					
					let ret2=[];
					ret2=arr.map(s => {						
						if(pred(s)){
							return s;
						}else{return null;}
					});
					console.log(ret2)
					
					let ret3;
					ret3=arr.filter(pred);
					console.log(ret3);
				}		
				f3(arr1,s=>s.v==="v0" || typeof s.n==='undefined')
				
			]
			
			https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
			//rest syntax
			[
			
			
				let o1 = {k:"key1",k2:"key2"}
				let o2 = {k:"key3",k2:"key4"}
				let o3 = Object.assign(o1,o2,{val:"v1"})
				let o4 = {...o1,...o2}
				
				console.log(o1)
				console.log(o2)
				console.log(o3)	
				console.log(o4)	
			]
			
			//merge
			[
				let o5 = ({...o1},{...o2})
				console.log(o5)	
				
				const merge = (...args) => ({...args})
				let o6 = merge (o1,o2)
				console.log(o6)
				
				f3 = (p0,p1=1,p2="a") => ((p0*p1)+p2)
				
				let p = {v0:"v0",v2:"v02",v4:"v4"}		
				let {v0,v2,v4} = p
				console.log(v4)
			
			]
			
			//map_forEach
			[
			
				let arr1 = [{v:"v0",n:"n0"},{v:"v1",n:"n1"},{v:"v2",n:"n2"},{v:"v2"}];		
				function f3(arr,pred){
					let ret=[];
					arr.forEach(s => {						
						if(pred(s)){
							ret.push(s);
						}
					});
					console.log(ret)
					
					let ret2=[];
					ret2=arr.map(s => {						
						if(pred(s)){
							return s;
						}else{return null;}
					});
					console.log(ret2)
					
					let ret3;
					ret3=arr.filter(pred);
					console.log(ret3);
				}		
				f3(arr1,s=>s.v==="v0" || typeof s.n==='undefined')
			]
			
			//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
			assign[			
				let o1 = {k:"key1",k2:"key2"}
				let o2 = {k:"key3",k2:"key4"}
				let o3 = Object.assign(o1,o2,{val:"v1"})
				
				console.log(o1)
				console.log(o2)
				console.log(o3)
			]
			
			//spread
			//rest syntax
			https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
			[
				let o1 = {k:"key1",k2:"key2"}
				let o2 = {k:"key3",k2:"key4"}
				let o3 = Object.assign(o1,o2,{val:"v1"})
				let o4 = {...o1,...o2}
				
				console.log(o1)
				console.log(o2)
				console.log(o3)	
				console.log(o4)	
				
				//merge
				let o5 = ({...o1},{...o2})
				console.log(o5)	
				
				const merge = (...args) => ({...args})
				let o6 = merge (o1,o2)
				console.log(o6)			
			]
			
			Destructuring Assignment Shorthand
			[
			
				https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
				https://www.sitepoint.com/shorthand-javascript-techniques/
				
				var o = {p: 42, q: true};
				var {p, q} = o;

				console.log(p); // 42
				console.log(q); // true

			]
			
			recursiveArraySearch[
					  recursiveArraySearch(arr, constraint){
					var ret;
					if(arr && arr.length>0){
						arr.forEach(function nested(a){
							if (constraint(a)){
								ret=a; 
							}
							if(Array.isArray(a.children)){
								a.children.forEach(nested);
							}
						});
					}
					return  ret;
				}
			]
			
			importExport[
			
				export default
				export {} - object
				
				import t
				import {t} - object
				
			]
		
			...args rest arguments
			map(array)		
			assign(target,source)
			
			let obj = {
				...objToCopy,
				prop
			}
						
			document_load_event[
				document.addEventListener("DOMContentLoaded",check,false);
			]					
					
			fetchAPIExml
			[

				function fu()
				{

					//let request = new Request('https://www.mozilla.org/favicon.ico');

					let header = new Headers({
						'Access-Control-Allow-Origin': '*',
						'Content-Type': 'multipart/form-data',
						//'Cookie': '.AspNetCore.Antiforgery.YEUXIw3HZOc = CfDJ8Ou_8W44IelJgfoicChT_VId8E1F7M2W0LjUD9 - Cynd0dDOY5IFA56_rareAJL3Zy8gCbOlQ2A_XtpRcJ4_2nK6V2 - x - H3co_PZEHwq83uUCPeLFeJyV97wWZTIYLxu0ZX0P8EYbE2bzTLrUuBHElt8; .ASPXANONYMOUS = s8aMXdv61AEkAAAAZDVhNzg0YTUtZmE0MC00NTYzLTg1OTAtNDUyMmNlMTMwYjFjhVOdCG1RAuh4BDI8J_HOhTXe6xtXJHUiI6jWbMsB53k1; .ASPXAUTH = 9B9DC2BEDC90BC80218C5119D81A61C1111B413E17239627A9609F735CEE0178169FD783A39E1E5F25F1A999AD1A21FAA6C4108FEB2D93590D15B1E02330A6DBB6360B18FDCDBFCF2827B5D38ED35D31B8B457E1979EAE3E8D05179E85E31426804620C1DF24FBCB0753716BCE16F7AA8329E1FCE8E8AEEBEA4C9515276530379D69AD43FD3476551665E2F281AD1B31D0DD7FC4991569A532F0CDC286C031E28F34CEBE4EC0AF57030131AB4AB283E95DFC6B730CAE866A0D98613EAED704B77586CE499415C91F45538792CB485699F13E46520B703BA3CA26CEA83EF5D459'
					});
					let sentData = {
						method: 'GET',
						mode: 'cors',
						headers: {'c':'c'}
					};
					
					var myHeaders = new Headers();
					myHeaders.append('Content-Type', 'text/html; charset=utf-8');
					myHeaders.append(
						//'Cookie', '.AspNetCore.Antiforgery.YEUXIw3HZOc=CfDJ8Ou_8W44IelJgfoicChT_VId8E1F7M2W0LjUD9-Cynd0dDOY5IFA56_rareAJL3Zy8gCbOlQ2A_XtpRcJ4_2nK6V2-x-H3co_PZEHwq83uUCPeLFeJyV97wWZTIYLxu0ZX0P8EYbE2bzTLrUuBHElt8; .ASPXANONYMOUS=s8aMXdv61AEkAAAAZDVhNzg0YTUtZmE0MC00NTYzLTg1OTAtNDUyMmNlMTMwYjFjhVOdCG1RAuh4BDI8J_HOhTXe6xtXJHUiI6jWbMsB53k1; .ASPXAUTH=9B9DC2BEDC90BC80218C5119D81A61C1111B413E17239627A9609F735CEE0178169FD783A39E1E5F25F1A999AD1A21FAA6C4108FEB2D93590D15B1E02330A6DBB6360B18FDCDBFCF2827B5D38ED35D31B8B457E1979EAE3E8D05179E85E31426804620C1DF24FBCB0753716BCE16F7AA8329E1FCE8E8AEEBEA4C9515276530379D69AD43FD3476551665E2F281AD1B31D0DD7FC4991569A532F0CDC286C031E28F34CEBE4EC0AF57030131AB4AB283E95DFC6B730CAE866A0D98613EAED704B77586CE499415C91F45538792CB485699F13E46520B703BA3CA26CEA83EF5D459'
				'.AspNetCore.Antiforgery.YEUXIw3HZOc','CfDJ8Ou_8W44IelJgfoicChT_VId8E1F7M2W0LjUD9-Cynd0dDOY5IFA56_rareAJL3Zy8gCbOlQ2A_XtpRcJ4_2nK6V2-x-H3co_PZEHwq83uUCPeLFeJyV97wWZTIYLxu0ZX0P8EYbE2bzTLrUuBHElt8'
					)
					
					myHeaders.append(
				'.ASPXANONYMOUS','s8aMXdv61AEkAAAAZDVhNzg0YTUtZmE0MC00NTYzLTg1OTAtNDUyMmNlMTMwYjFjhVOdCG1RAuh4BDI8J_HOhTXe6xtXJHUiI6jWbMsB53k1'
					)
					
					myHeaders.append(
				'.ASPXAUTH','9B9DC2BEDC90BC80218C5119D81A61C1111B413E17239627A9609F735CEE0178169FD783A39E1E5F25F1A999AD1A21FAA6C4108FEB2D93590D15B1E02330A6DBB6360B18FDCDBFCF2827B5D38ED35D31B8B457E1979EAE3E8D05179E85E31426804620C1DF24FBCB0753716BCE16F7AA8329E1FCE8E8AEEBEA4C9515276530379D69AD43FD3476551665E2F281AD1B31D0DD7FC4991569A532F0CDC286C031E28F34CEBE4EC0AF57030131AB4AB283E95DFC6B730CAE866A0D98613EAED704B77586CE499415C91F45538792CB485699F13E46520B703BA3CA26CEA83EF5D459'
					)
					
					
					let _request = new Request(`http://localhost:49897/GeoPosition/GetCategoryServiceTypes?categoryId=039e061b-b3a6-4e31-ab9a-d20352f87230`, 
					{ method: 'GET', credentials: 'include' });

					document.cookie='.AspNetCore.Antiforgery.YEUXIw3HZOc=CfDJ8Ou_8W44IelJgfoicChT_VId8E1F7M2W0LjUD9-Cynd0dDOY5IFA56_rareAJL3Zy8gCbOlQ2A_XtpRcJ4_2nK6V2-x-H3co_PZEHwq83uUCPeLFeJyV97wWZTIYLxu0ZX0P8EYbE2bzTLrUuBHElt8;'
					document.cookie='.ASPXANONYMOUS=s8aMXdv61AEkAAAAZDVhNzg0YTUtZmE0MC00NTYzLTg1OTAtNDUyMmNlMTMwYjFjhVOdCG1RAuh4BDI8J_HOhTXe6xtXJHUiI6jWbMsB53k1;'
					document.cookie='.ASPXAUTH=9B9DC2BEDC90BC80218C5119D81A61C1111B413E17239627A9609F735CEE0178169FD783A39E1E5F25F1A999AD1A21FAA6C4108FEB2D93590D15B1E02330A6DBB6360B18FDCDBFCF2827B5D38ED35D31B8B457E1979EAE3E8D05179E85E31426804620C1DF24FBCB0753716BCE16F7AA8329E1FCE8E8AEEBEA4C9515276530379D69AD43FD3476551665E2F281AD1B31D0DD7FC4991569A532F0CDC286C031E28F34CEBE4EC0AF57030131AB4AB283E95DFC6B730CAE866A0D98613EAED704B77586CE499415C91F45538792CB485699F13E46520B703BA3CA26CEA83EF5D459'

					_request.headers = myHeaders;
					console.log('request')
					console.log(_request.url)
					console.log(_request.method)
					console.log(_request.headers.get('.ASPXANONYMOUS'))
					console.log('cookie')
					console.log(document.cookie)	
					console.log(_request)

					fetch(_request)
					.then(
						//response => response.json(),		
						response=>console.log(response),
						err => console.log('Redux dispatch error:', err)
					)
					.then(			
						json => {
							console.log(json);
							json
						}
						//dispatch(ChieldrenReceived(id,json))
					);
					
				}

			]
		
			workingFetchAjax
			[
				
				function fu()
				{

					//let request = new Request('https://www.mozilla.org/favicon.ico');
					
					var myHeaders = new Headers();
					myHeaders.append('Content-Type', 'text/html; charset=utf-8');		
					
					let _request = new Request(`http://localhost:49897/GeoPosition/GetCategoryServiceTypes?categoryId=039e061b-b3a6-4e31-ab9a-d20352f87230`, 
					{ method: 'GET', credentials: 'include' , mode:'no-cors'});

					document.cookie='.AspNetCore.Antiforgery.YEUXIw3HZOc=CfDJ8Ou_8W44IelJgfoicChT_VId8E1F7M2W0LjUD9-Cynd0dDOY5IFA56_rareAJL3Zy8gCbOlQ2A_XtpRcJ4_2nK6V2-x-H3co_PZEHwq83uUCPeLFeJyV97wWZTIYLxu0ZX0P8EYbE2bzTLrUuBHElt8;'
					document.cookie='.ASPXANONYMOUS=s8aMXdv61AEkAAAAZDVhNzg0YTUtZmE0MC00NTYzLTg1OTAtNDUyMmNlMTMwYjFjhVOdCG1RAuh4BDI8J_HOhTXe6xtXJHUiI6jWbMsB53k1;'
					document.cookie='.ASPXAUTH=9B9DC2BEDC90BC80218C5119D81A61C1111B413E17239627A9609F735CEE0178169FD783A39E1E5F25F1A999AD1A21FAA6C4108FEB2D93590D15B1E02330A6DBB6360B18FDCDBFCF2827B5D38ED35D31B8B457E1979EAE3E8D05179E85E31426804620C1DF24FBCB0753716BCE16F7AA8329E1FCE8E8AEEBEA4C9515276530379D69AD43FD3476551665E2F281AD1B31D0DD7FC4991569A532F0CDC286C031E28F34CEBE4EC0AF57030131AB4AB283E95DFC6B730CAE866A0D98613EAED704B77586CE499415C91F45538792CB485699F13E46520B703BA3CA26CEA83EF5D459'

					fetch(_request)
					.then(response => response.json())		
					.then(
						j => {
							console.log(j);
							console.log(JSON.stringify(j));
						}
						//dispatch(ChieldrenReceived(id,json))
					);
					
				}

				ajax[
				
					$.ajax({
					method: "GET",
					url: "http://localhost:49897/GeoPosition/SearchCategories?parentId=039e061b-b3a6-4e31-ab9a-d20352f87230"
					})
					.done(function( ret ) {
					console.log( "done: ");
					console.log(ret)
					})
					.fail(function(c){
					console.log("fail")
					console.log(c)
					});
					
				]
				
			]
			
			overall[
			
				//delete prop
				delete Employee.firstname;

				importFromModulesExport[

				export default
				export {} - object

				import t
				import {t} - object

				]

				...args rest arguments
				map(array)		
				assign(target,source)

				let obj = {
				...objToCopy,
				prop
				}

				document_load_event[
				document.addEventListener("DOMContentLoaded",check,false);
				]

			]
		
		]
				
		shorthands[
			//ternary
			if..else
			let v = c ? x :
			//shortcircuit
			//!(if c null,undefined,'',0)
			let v = c || x;
			//decl shrt 
			let x,y,z =3;
			//if(truthy)
			//if(!truthy)
			//arrays 
			for(let i of arr)
			//fucnt shrothands
			f = p => console.log("val",p);
			setTimeout(() => console.log("val"),1000);
			arr.forEach(s=>console.log(s));
			//implicit return
			f2 = p => ( p); 
			//default param
			f3 = (p0,p1=1,p2="a") => ((p0*p1)+p2); //f3(2) =>"2a"
			//template str
			let p0 ="Var";
			let c0=`a${p0}`; //console.log(c0); => aVar
			//destructuring
			let p = {v0:"v0",v2:"v02",v4:"v4"}		
			let {v0,v2,v4} = p
			//rest syntax
			let a0 = [1,2,3];
			let b0 = [...a0];
			a0[2]=10;
			let c0 = [a0,b0]
			console.log(a0) => [1, 2, 10]
			console.log(b0) => [1, 2, 3]
			console.log(c0) => {[],[]}
			//map,foreach,filter
			let arr1 = [{v:"v0",n:"n0"},{v:"v1",n:"n1"},{v:"v2",n:"n2"},{v:"v2"}];		
			function f3(arr,pred){
				let ret=[];
				arr.forEach(s => {						
					if(pred(s)){
						ret.push(s);
					}
				});
				console.log(ret)
				
				let ret2=[];
				ret2=arr.map(s => {						
					if(pred(s)){
						return s;
					}else{return null;}
				});
				console.log(ret2)
				
				let ret3;
				ret3=arr.filter(pred);
				console.log(ret3);
			}		
			f3(arr1,s=>s.v==="v0" || typeof s.n==='undefined')
			//Math.floor(4.9)
			~~4.9
			
		]
		
		//slice immutable
		//splice mutates 
		
		//delete prop
		delete Employee.firstname;
		
	]
	
	web_dev[
		https://developers.google.com/web/
	]

	jira[
		//dateformat
		01/декабря/2018
	]
			
	lit[
		
		c#
		[
		
			async [
				https://weblogs.asp.net/dixin/understanding-c-sharp-async-await-1-compilation
				https://docs.microsoft.com/en-us/dotnet/standard/async-in-depth
			]
			
			
			enums_code_smell[
				https://softwareengineering.stackexchange.com/questions/300080/when-are-enums-not-a-code-smell
				https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/enumeration-classes-over-enum-types
				https://stackoverflow.com/questions/10809543/why-are-these-enums-bad
			]

			//c#  async awai tutorial
			https://www.codingame.com/playgrounds/4240/your-ultimate-async-await-tutorial-in-c/introduction
			
			//c# shoot in the leg with Tasks
			https://blog.maximerouiller.com/post/shooting-yourself-in-the-foot-with-c-tasks-continuewith/
		
			//query to linq expression tree
			https://weblogs.asp.net/dixin/entity-framework-core-and-linq-to-entities-5-query-translation-implementation
			//yield return epl
			https://devblogs.microsoft.com/oldnewthing/20080812-00/?p=21273
			https://stackoverflow.com/questions/39476/what-is-the-yield-keyword-used-for-in-c 
			
			
			IenumerableIcollectionIlst[
				https://medium.com/@kunaltandon.kt/ienumerable-vs-icollection-vs-ilist-vs-iqueryable-in-c-2101351453db
					IEnumerable{- no crud,no count + Filter,enumerate}
					ICollection
					{
					count O(1), + enumerate,count,filter,crud
						generates Func<T,bool>
					}
					IList{:Ienumerable + :ICollection + insert in the middle ?O(n)}
					IQueryable{
						:ICollection
						generates Expression<Func<T,bool>>
					}
					
				IenumerablevsIlist[
					https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/guidelines-for-collections
					https://stackoverflow.com/questions/1072614/should-i-always-return-ienumerablet-instead-of-ilistt
				]
			]
		
			//readonly
			https://codeblog.jonskeet.uk/2014/07/16/micro-optimization-the-surprising-inefficiency-of-readonly-fields/
			https://softwareengineering.stackexchange.com/questions/132747/is-having-public-constants-bad
			public readonly goes to backed into referenced assemblies
			
			https://csharpindepth.com/Articles/PropertiesMatter
			//async 
			https://jeremybytes.blogspot.com/2015/01/task-and-await-basic-exception-handling.html
			
				
			msdn[
				
				https://docs.microsoft.com/en-us/ef/ef6/fundamentals/async
					
				//query exec
				https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/query-execution#immediate-query-execution
				//standart query ops
				https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/standard-query-operators-in-linq-to-entities-queries
				https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/standard-query-operators-in-linq-to-entities-queries
				https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/bb397896(v=vs.120)
				//supported and unsuported linq
				https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/supported-and-unsupported-linq-methods-linq-to-entities
				//query methods
				https://docs.microsoft.com/en-us/dotnet/api/system.linq.queryable.any?view=netframework-4.7.2
				
				//CPU usage analize
				https://docs.microsoft.com/en-us/visualstudio/profiling/beginners-guide-to-performance-profiling?view=vs-2017
				//code profiling
				https://docs.microsoft.com/en-us/visualstudio/profiling/beginners-guide-to-performance-profiling?view=vs-2015
				//async
				https://docs.microsoft.com/en-us/ef/ef6/fundamentals/async
				//native sql
				https://docs.microsoft.com/en-us/dotnet/api/system.data.linq.sqlclient.sqlmethods?view=netframework-4.7.2
				//ef core
				https://docs.microsoft.com/en-us/ef/core/what-is-new/ef-core-3.0/features
				//c# ref
				https://opdhsblobprod02.blob.core.windows.net/contents/c6aea4f5457448ee818b7292ba695982/68a07d048ee6f26b1aa8d66304d31f2a?sv=2015-04-05&sr=b&sig=u9Hpl0y6yB5fZi41T9CnaQOQgOLgqOt8TEEr5MwjVrg%3D&st=2019-04-01T07%3A50%3A48Z&se=2019-04-02T08%3A00%3A48Z&sp=r
				//.NET tools
				https://docs.microsoft.com/en-us/dotnet/framework/tools/ngen-exe-native-image-generator
				//query data
				https://docs.microsoft.com/en-us/ef/ef6/querying/related-data
			]
			
			core[
			
				https://the-eye.eu/public/Books/IT%20Various/LINQ%20Quickly.pdf
				https://elacademico.files.wordpress.com/2009/11/manning-linq-in-action-jan-2008-19339881691.pdf
				https://the-eye.eu/public/Books/IT%20Various/C%23%20in%20Depth%2C%202nd%20Edition.pdf
				http://sd.blackball.lv/library/CLR_via_CSharp_(Jeffrey_Richter_4th_Edition).pdf
				//readonly
				https://codeblog.jonskeet.uk/2014/07/16/micro-optimization-the-surprising-inefficiency-of-readonly-fields/
				https://softwareengineering.stackexchange.com/questions/132747/is-having-public-constants-bad
				public readonly goes to backed into referenced assemblies
				
				https://csharpindepth.com/Articles/PropertiesMatter
				//async 
				https://jeremybytes.blogspot.com/2015/01/task-and-await-basic-exception-handling.html
			
			]
			
			
			
		]
		
		//web assembly
		https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/
		
		https://medium.com/basecs/a-most-perfect-union-just-in-time-compilers-2938712a9f6a
	
		https://opdhsblobprod02.blob.core.windows.net/contents/c6aea4f5457448ee818b7292ba695982/68a07d048ee6f26b1aa8d66304d31f2a?sv=2015-04-05&sr=b&sig=u9Hpl0y6yB5fZi41T9CnaQOQgOLgqOt8TEEr5MwjVrg%3D&st=2019-04-01T07%3A50%3A48Z&se=2019-04-02T08%3A00%3A48Z&sp=r
		http://sd.blackball.lv/library/CLR_via_CSharp_(Jeffrey_Richter_4th_Edition).pdf
		https://the-eye.eu/public/Books/IT%20Various/C%23%20in%20Depth%2C%202nd%20Edition.pdf
		https://elacademico.files.wordpress.com/2009/11/manning-linq-in-action-jan-2008-19339881691.pdf
		https://the-eye.eu/public/Books/IT%20Various/LINQ%20Quickly.pdfublic/Books/IT%20Various/LINQ%20Quickly.pdf

		//point in polygon
		http://geomalgorithms.com/a03-_inclusion.html
	
		//5 int in 5 days
		https://medium.com/@XiaohanZeng/i-interviewed-at-five-top-companies-in-silicon-valley-in-five-days-and-luckily-got-five-job-offers-25178cf74e0f
		//6 int in 6 days
		https://blog.usejournal.com/i-interviewed-at-six-top-companies-in-silicon-valley-in-six-days-and-stumbled-into-six-job-offers-fe9cc7bbc996

		https://blog.usejournal.com/what-i-learned-in-my-first-two-years-as-a-software-engineer-4e374fdcf0fd
		//300к job offer
		https://blog.usejournal.com/how-i-negotiated-a-software-engineer-offer-in-silicon-valley-f11590f5c656
				
				
		js[
		https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/
		
		//async await
		https://alligator.io/js/async-functions/
		
		//check datatypes in js
		https://webbjocke.com/javascript-check-data-types/
		
		//destructuring
		https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
		
		//this
		https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
	
		redux basic st 500
		redux combine and split to threads fn 560
		redux components st 560
		575 -> map state to props

		redux tree template 
		https://redux.js.org/introduction/examples#real-world

		//you not need graphql
		https://blog.logrocket.com/5-reasons-you-shouldnt-be-using-graphql-61c7846e7ed3
		//techs to learn
		//techs, front, back, cash, render, test
		https://medium.com/zerotomastery/top-libraries-tech-to-learn-in-2019-for-full-stack-developers-f8c0331b8a00
		//JS 5 mnths
		https://medium.com/zerotomastery/learn-to-code-in-2019-get-hired-and-have-fun-along-the-way-d4197f96be27

		//webassembly roudmap
		https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/10/01-07-runtime-09-final-e1539904436477.png
		https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/

		https://medium.com/@me_37286/19-ways-to-become-a-better-node-js-developer-in-2019-ffd3a8fbfe38


		//react UI component libs
		https://blog.bitsrc.io/11-react-component-libraries-you-should-know-178eb1dd6aa4
		http://react-toolbox.io/#/
		https://material-ui.com/getting-started/learn/
		https://material.io/tools/icons/?style=baseline

			//recursive react tree
			https://medium.com/the-guild/recursive-react-tree-component-implementation-made-easy-466dfce1a008
			
			//iterate object props
			https://hackernoon.com/5-techniques-to-iterate-over-javascript-object-entries-and-their-performance-6602dcb708a8
			
			//destructuring
			https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
			
			//this
			https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
			
			//
			https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
			
			//iterate over object props
			https://hackernoon.com/5-techniques-to-iterate-over-javascript-object-entries-and-their-performance-6602dcb708a8
			
			//redux normalizer
			//treeshaped structures
			https://stackoverflow.com/questions/32798193/how-to-handle-tree-shaped-entities-in-redux-reducers
		
			//backendefication of frontend
			https://hackernoon.com/the-backendification-of-frontend-development-62f218a773d4
			
			//redux in one line
			https://gist.github.com/gaearon/ffd88b0e4f00b22c3159
			
				//es6
			http://exploringjs.com/es6/index.html#toc_ch_coding-style
			https://hacks.mozilla.org/2015/08/es6-in-depth-modules/
			
			//js render
			https://blog.sessionstack.com/how-javascript-works-the-rendering-engine-and-tips-to-optimize-its-performance-7b95553baeda
			
			//self=this
			https://medium.com/@vijay.j.shekhawat/javascript-why-var-self-this-bbbaf98ab9d9
			
			//es6 styleguides
			https://codeburst.io/5-javascript-style-guides-including-airbnb-github-google-88cbc6b2b7aa
			//airbnb styleguide
			https://github.com/airbnb/javascript
			
			
			//inside this class scope binds function to this class scope
			bind.FunctionName.bind(this)
			https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind
			
			//need in frameworks
			https://medium.freecodecamp.org/do-we-still-need-javascript-frameworks-42576735949b
			//sync state of UI
			https://medium.com/dailyjs/the-deepest-reason-why-modern-javascript-frameworks-exist-933b86ebc445
			//bind 
			https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/
			//self == this 
			https://medium.com/@vijay.j.shekhawat/javascript-why-var-self-this-bbbaf98ab9d9
			
			//react
			//wrapper
			https://til.hashrocket.com/posts/c5725d4d01-react-wrapper-components-with-nested-children
			//react to ES6
			https://www.newmediacampaigns.com/blog/refactoring-react-components-to-es6-classes
				
			//facebook templates
			https://github.com/facebook/create-react-app
			//kriasoft
			https://github.com/kriasoft/react-app
			
					
			//guidelines for collections
			https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/guidelines-for-collections
			//infr persistance
			https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design

			//redux
			//three priniples
			https://redux.js.org/introduction/three-principles
			//getting started
			https://redux.js.org/introduction/getting-started
			//todo example
			https://redux.js.org/basics/example

			//react
			//validation typecheck
			https://reactjs.org/docs/typechecking-with-proptypes.html
			//events
			https://reactjs.org/docs/events.html
			//render props
			https://reactjs.org/docs/render-props.html
			//create context
			https://reactjs.org/docs/context.html

			//react redux 5 ways to bind
			https://blog.benestudio.co/5-ways-to-connect-redux-actions-3f56af4009c8
			//react 
			http://allenfang.github.io/react-bootstrap-table/index.html
			https://www.fullstackreact.com/p/using-presentational-and-container-components-with-redux/
			https://medium.com/dailyjs/techniques-for-decomposing-react-components-e8a1081ef5da

			//react todp
			https://codesandbox.io/s/9on71rvnyo
			
			//react Business logic
			https://medium.com/netscape/component-state-vs-redux-store-1eb0c929277
			
			//immutability in with redux
			https://blog.hellojs.org/immutability-in-javascript-using-redux-33405706d31d
			//arrow func diff
			https://cmichel.io/es6-class-methods-differences/
		]
				
		//package-lock
		https://medium.com/coinmonks/everything-you-wanted-to-know-about-package-lock-json-b81911aa8ab8		
		
		//angular ng-book
		http://www.nglesson.com/Livres/ng-book2-angular-5-r67.pdf
		
		//react
		fullstack react the complete guide to reactjs and friends
		abstr[
			server.js
			modash
			enzyme
			react-router
			Flux & redux
		]
		
		//clojure
		https://medium.com/@daniel.oliver.king/getting-work-done-in-clojure-the-building-blocks-39ad82796926
		//js mass psychose
		https://hackernoon.com/the-javascript-phenomenon-is-a-mass-psychosis-57adebb09359	
		//programm scaffolding
		https://medium.com/@eddyystop/create-your-own-super-scaffolding-automatically-add-custom-code-89418e888dac
		
		//css tricks
		https://css-tricks.com/full-width-containers-limited-width-parents/		
		
		//react styles 
		https://codeburst.io/4-four-ways-to-style-react-components-ac6f323da822
		
		//composing software eric elliott epub
		
		//webpack bundle size
		https://hackernoon.com/optimising-your-application-bundle-size-with-webpack-e85b00bab579
		
		//ml
		https://hackernoon.com/thinking-of-self-studying-machine-learning-remind-yourself-of-these-6-things-b55a5f2b6c7d
		
		//web assembly
		https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/
		
				
		//core_D	
		https://asp.net-hacker.rocks/2016/02/17/dependency-injection-in-aspnetcore.html		
				
		https://medium.com/basecs/a-most-perfect-union-just-in-time-compilers-2938712a9f6a


		http://sd.blackball.lv/library/CLR_via_CSharp_(Jeffrey_Richter_4th_Edition).pdf
		https://the-eye.eu/public/Books/IT%20Various/C%23%20in%20Depth%2C%202nd%20Edition.pdf
		https://elacademico.files.wordpress.com/2009/11/manning-linq-in-action-jan-2008-19339881691.pdf
		https://the-eye.eu/public/Books/IT%20Various/LINQ%20Quickly.pdf
	
		http://www.oldapps.com/Internet_explorer.php?old_Internet_explorer=11
		https://medium.com/@rhamedy/key-habits-and-things-i-wish-i-knew-earlier-as-a-developer-43c9466a0407
		https://dev.to/
		
	]
	
	links[
		
		https://try.dot.net/
		
		http://www.oldapps.com/Internet_explorer.php?old_Internet_explorer=11

		https://sharplab.io/	
		https://medium.com/@rhamedy/key-habits-and-things-i-wish-i-knew-earlier-as-a-developer-43c9466a0407
		
		//ienumerable
		https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/guidelines-for-collections
		
		//formik - small redux
		https://jaredpalmer.com/formik/docs/overview
		
		//react bootstrap
		https://medium.com/luteceo-software-chemistry/lightweight-starter-kit-for-asp-net-core-react-typescript-and-webpack-with-hmr-7bc977b7712
		//react in core
		https://developer.okta.com/blog/2018/07/02/build-a-secure-crud-app-with-aspnetcore-and-react
		https://docs.microsoft.com/en-us/aspnet/core/client-side/spa/react?view=aspnetcore-2.2&tabs=visual-studio
					
		//guidelines for collections
		https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/guidelines-for-collections
		//infr persistance
		https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design

		//redux
		//three priniples
		https://redux.js.org/introduction/three-principles
		//getting started
		https://redux.js.org/introduction/getting-started
		//todo example
		https://redux.js.org/basics/example

		//react
		//validation typecheck
		https://reactjs.org/docs/typechecking-with-proptypes.html
		//events
		https://reactjs.org/docs/events.html
		//render props
		https://reactjs.org/docs/render-props.html
		//create context
		https://reactjs.org/docs/context.html
		
	]	

	clrViaCshrp
	[
	
		CLR -> manged module for 32x or 64x PE32, PE32+
		C# -> compiler -> managed module
		Basic -> basic compiler -> -=-
		IL source -> IL assembler -> -=-
		
		IL - JIT compiler-> CPU instr
		
		Managed module IL + metadata(GC collected datatypes) 
			(Data execution prevention DEP, Address space layput randomization ASLR)
		[
			PE32, PE32+ header -> windows header simmilar to COFF format , indicates file type 
			GUI, CUI, DLL
			
			CLR header -> header, flags, methodDef, entry point (Main )
			
			metadata -> tables of types and methods deined, table with types and members refrenced
			(
				o- always embeded in exe
				o- removes need in c/c++ header files
				o- intelisense, typechecking, GC
			)
			
			
			IL code -> code compiled from source. CLR at runtime copmiles IL to CPU instr
		]
		
		clr works with assembly [
			manifest - assembly metadata table containing files representing the assembly
			public export types implemented by asm files
			resource or data files associated with the asm
		]
		
		IL - heigher level language then most CPU machine
		all CLR facilivies available
			o- access and manipulate obj type
			o- create and init objs
			o- call virt methods on objects
			o- manipulate arr directly
			o- err handling
			
		p. 16
		EXECUTION - 
			before main executes CLR allocates internal datastructure to managed ref types access
			internal structure for each method with its implementation address
			on initialization sets each entry to undocummented function incide CLR => JITcompiler
			
			Main - first call to first method-> JITcompiler function call
			
			JITcompiler -> compiles native IL code to native CPU instr
				(knows method and type on call)
			-> searchs asm metadata for clled method IL
			-> native CPU instr saved to dynamic mem block
			-> goes back to CLR internal datastruc and replaces reference to method with addr of compile mem block
			-> jumps to mem block of compiled
		
		p. 18
		DEBUG MODE		
			-> generates nop IL instr, for breakpoints placement
				//optimize[+/-] /debug[+/-] 
		compiler switch:
			default -> /optimize- /debug- -> ILcode(unopt) JIT native( opt)
			-> /optimize- /debug(+/full/pdbonly) -> ILcode(unopt) JIT native( unopt)
			-> /optimize+ /debug(-/+/full/pdbonly) -> ILcode(opt) JIT native( opt)
		
		p. 19-20
		.PDB (Programm database) - helps debug find local vars and map IL instr to source.
		
		System.Runtime.ProfileOptimization -> causes CLR to record methods optimized by JIT
			on multiple CPU would compiles concurrently
		
		IL -> 
			o- stackbased, no registers, easy to target CLR
			o- typeless
			o- verification while CLR compiles IL to CPU source 
				varification(
					o- parameter number & type check
					o- return val usage				
				)
		
		p. 21
		Virtual address space VAS ->
		
		CLR -> offers ability to execute several AppDomains in single OS process
		
		unsafe code -> 
			/unsafe -> can work on memory directly
			o- JIT compiler checks assembly befor compile unsafe on 
				System.Security.Permissions.SecurityPermission 
				and 
				System.Security.Permissions.SecurityPermissionFlag’s SkipVerification 
			
			throws -> 
				System.InvalidProgramException or a System.Security.VerificationException
		p. 23-24
			NGen.exe -> 
				o- usefull for start optimizing 
				o- asm loaded into multiple processes
				o- %SystemRoot%\Assembly genned asembly with native code location
		
			CLR searchs for precompiled native file and uses it, JIT compiles code only on absence
			
				x- no intellectual prop prot 
				x- rassinhronization of (CLR ver, CPU type, Win ver, asm ID)
				x- not creates optimiations and can perform slower/
			
			MPGO.exe - startup time optimization
		
		p. 25-26
			Framework class library FCL -> DLL asm with type def and some funcionality
				empl. System type with Object
			
			most_usefull[
				System - basic types
				System.Data - comunicating with database and processing
				System.IO 
				System.Net - low-level networ communication, protocols
				System.RuntimeInteropServices - unmanaged code, COM, win32 functions or DLLs
				System.Security - protecting data and resources
				System.Text - 
				System.Threading - asynchronous operations
			]
		
		p. 27-29
			Common Type System CTS -> 
				Types:
					Field, Method, Property (validation, readonly), Event
				
				Visibility rules:
					Private
					Famility/protected (derived types)
					Family and assembly(derived if def in asm, not in C# but in IL)
					Assembly(Internal)
					Family or assembly(protected internal) derieved exist in asm
					Public				
				CTS defines inheritance rules, virtual methods, obj lifetime.
				Type can dereive from once base class
				
				Sustem.Object 
					o- compare intances for equality
					o- get hash
					o- shalow (bitwise) copy
					o- get string representation
					
			ECMA-334,335
			
		p.30
			Common Language Specification CLS ->
				
			
	]	
	
	tv[
		1110900436
	]
	
]
