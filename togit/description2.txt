


Кратко:
===========================================

-------------------------------------------
Batch_1C_Orientdb ->
{
Прод. Версия my.nspk.ru, проект POST используестя для наполнения данными новой базы, если такая возможность возникает. Проект PUT скомпилирован в .exe приложение, которео 
по расписанию запускается на msk1-vm-inapp01 для поддержания адресной книги в актуальном состоянии
}
	содержит основные комманды и методы по работе с Orient.
	OrientClassesHelper через OrientREST кидает собранный batch query, к URL.
	десереализует orient JSON response непосредственно в POCO класс моделей, без форматирования JSON,
	И возвращает коллекцию объектов модели.
	POST инициализирует объекты Orient, заливает первоначальные данные.
	PUT тянет с 1C, привеодит из объектов к 1С в комманды к orientDB, проверяет актуальность по AD апдейтит/добавляет(отсутсвтующих в апдейт листе) в Orient.
ActiveDirectoryOrientDbEtl ->
{
для отчетов по скуду. По крайней мере эта его часть не используется, т.к. не актуально
}
	тянет работников Person с сервиса 1C тем же способом как и в Batch_1C_Orientdb. Названия Edge, странные, но посмотреть, не конфиг ли это нельзя,
	на сервис OCreate нет ссылки.
	заливает в SQLserver msk1-vm-ovisp01 SKUD. Приведение типов через через dynamic, есть модель POCO для всех иточников.
	Helper ExcelToDb содержит заливку данных из Excel через ExcelReaderFactory в базу SKUD, чтением xml схемы, наполнением Datarow иприведением
	к объекту Модели, с дальнейшей загрузкой в базу. сначала первый файл (Floor,event,location), затем второй(Visitor) из зардкод Excel.
	Добавление везде закоменчено.
	AdHelper, чето нигде не используется.
ADBook_API ->
{
будет использоваться для News
будет использоваться в адресной книге позже. Пока не располагается нигде
}
	Формирование списка из хешей SHA512 (в Batch_1C_Orientdb MD5) файлов. Сравнение хеш входящего потока и существующих в папке файлов.
	Переразмеривание картинок, архивирование.
AddressBook_News ->
{
orientDB test: http://msk1-vm-ovisp02:2480/studio/index.html#/database/news_test(4)
orientDB prod: http://msk1-vm-indb01
build deploy: http://msk1-vm-ovisp01
newstest: http://msk1-vm-ovisp01:8081/api/News/Person
newstest2: http://msk1-vm-ovisp01:8083/api/News/Person
result: http://my.nspk.ru/
Это дев. Версия будущего нашего внутреннего портала. Здесь будет реализована работа с новостями, форумами, статьями, блогами и проч. 
Пока располагается на ovisp01, на нормальном IIS сервере и там его можно потестить
}
	Тянется к Orient возвращает строки результатов.
	абстракция с шаблонами команд к базе CRUD в OrientNews (через BatchBuiler строит OrientBatch ), часть комманд c бизнеслогикой в OrientNewsHelper.
AddressBook_backend ->
{
Саша утверждает, что это используется для возврата фотографий и при ее отсутствии – дефолтной картинки. Если Саша прав, то это используется для прома адресной книги и 
располалагестя на ovisp01
}
	Авторизуется в OrientdDb, возвращает фотку из url от почты.
Intranet ->
{
Ныне ушедшего из нспк Сереги Сидельникова работа – это опросник Quiz, который используется все еще в компании. И старая версия новостей, которая была переписана полностью 
в проекте AddressBook_News
}
	MVC под что-то похожее на http://list.nspk.ru/monh/
	в IntranetHelper генерик абстракция с методами репозитория, для работы с базой.
	ValidateAtLeastOneCheckedAttribute custom validation attribute
	Несколько POCO для Quiz, Result, Question, News.
	Взаимодействие с Orient через дравйвер. ДесериализацияJSON в POCO классы моделей.
	CRUD частичной подстановкой комманд через хелперы
AccessGateRequestAutomation ->
{Распологается в ОПКЦ  сегменте. (dc01-agwusr01.win.nspk.ru)
Требуется для завеления учетных записей из заявки Банков в домен  Шлюза Доступа.( ТРХ \ СИОМ \ Диспут)}
	FTPHelper использует fluentFTP, но на часть методов нигде нет ссылок. Загружает список с файла excel, парсится IXlsReader
	ADHelper так сказать CRUD для AD. Путь к списку заявителей из excel, и параметры пользователя с привилегиями тянет с конфигов.
	Ищет, создает, удаляет, права, группы, OU,
	ConsoleProcessorXLSData обертка вокруг ADHelper, с логированием, успешные резултаты через FileResultHelper имплементацию IResult пишутся в файл.
NoificationToRadio ->
{
Ежедневная выгрузка списка сотрудников с логинами для подрядчика, который процессит корпоративное радио. Располагается на ovisp01
}
рассылка на другой адресс чем в LOR	
	
	
	
проекты, которые скорее, похожи, на концепции:
-------------------------------------------	
LOR ->
{
archive
}
	POC для рассылки запроса к MSK1-VM-INTER01 Database=is4_32_5, распарсенного через datatable в html таблицу, через exchange.
HomebrewMainDev ->
{
Сашины какие-то изыскания в коде, нигде не используется, хранится должно в архиве скриптов
archive
}
	шифрование
cmdb ->
{
archive
}
	проверка концепций OrientDb и VMwareVim в одну строчку.
OADimport ->
{
Сашины наработки с прошлой работы, который мы используем в других проектах за основу обращения к AD. В архив скриптов как пример
archive
}
	POC обращения к AD через LDAP.
OrientDriver ->
{
Не используется, предпочтение отдано REST запросам, примеров которых куча в актуальных проектах, из которых самый актуальный на данный момент это AddressBook_News
}
	исходник драйвера Orient
	OrientConsole закомменченные методы работы с базой через драйвер
Сreate_Unit_Unit_Edge ->
{
Старьё, на основе которого строились актуальные нормальные проекты. Создавался как альтернатива драйверу Orient. Больше не используется, в треш
}
	не собирается чего то, но нутри проверка коннекта к Orient

	
	
Полно:
===========================================

Непонятки
-------------------------------------------
>>
ADBook_API -> FileHelper AddFile( ...compressing )
: if compressing {  выполнть проверку и охранить архив} ?
в коде поток сравнивается с неархиваированными, архивируется и добавляется к хешу, хэш от архива не проверяется.
а в предыдущем блоке .zip -> ищется хешь архива.
Какая имено логика предполагается при проверке потока для разных форматов?
Из кода предполагаю так:
if(picture) - > if(!checkhash){resize();save();moveToHashFolder();addHash();;}
if(.zip) - > if(!checkhashForCompressed)){save();moveToHashFolder();addHash();}
if(.zip,compressed=true) - > if(!checkhashForNOTCompressed){Compress();save();moveToHashFolder();addHash();}
if(.zip,compressed=false) - > if(!checkhashForNOTCompressed){save();moveToHashFolder();addHash();}

>>
ADBook_API.Controllers -> не понятно, как в контроллер попадают файлы, т.е. почему только поток, ведь если пользователю выкидывается окошко с
FileBrowser, удобнее всего получить сразу коллекцию файлов ччерез IEnumerable<HttpPostedFileBase>.

>>
Batch_1C_Orientdb.Intranet_POST.OneSHelper.GetData()
не осознал вот этот кусок:

foreach (int data in Enum.GetValues(typeof(OneSData)))
switch (data)
{
	case (int)OneSData.Person:
		oneSDbSet.Persons.AddRange(GetDataFromOneS(DataHelper.GetStringValue((OneSData)data),
			new Person(), new DateTime(2014, 08, 04)));
		break;
	case (int)OneSData.Unit:
		oneSDbSet.Units.AddRange(GetDataFromOneS(DataHelper.GetStringValue((OneSData)data), new Unit(), new DateTime(2014, 08, 04)));
		break;
	case (int)OneSData.Employee:
		oneSDbSet.Employees.AddRange(GetDataFromOneS(DataHelper.GetStringValue((OneSData)data), new Employee(), DateTime.Now));
		break;
}
Приведенный номер типа OneSData, сравнивается с приведенными к целому StringValueAttribute а затем передается приведенный к типу OneSData параметр в 
GetDataFromOneS, который принимает просто тип StringValueAttribute, для последующего стучания к сервису , стучаземуся в  1"спаси и сохрани"С.
Как я понимаю это работает :  в любом случае запустим все три метода, создадутся стандартные инстансы объектов, 
при этом приведение к целому оказывается излишне. 



>>
Batch_1C_Orientdb.Intranet_POST и Batch_1C_Orientdb.Intranet_PUT ->
intranet_POST как создающий/инициализирующий 1С
intranet_PUT обновление из 1C,AD 
Сравниваются хеш записи Orient vs  1C ,апдейт найденных в Orient, запись новых из ненайденных



Различия
-------------------------------------------
ActiveDirectoryOrientDbEtl - > Ninject
AddressBook_News -> AutoFac



По общей логике
-------------------------------------------

ActiveDirectoryOrientDbEtl ->
	ActiveDirectoryOrientDBEtl.Contexts
		OrientDbContext ->
			1) претендент на отдельный проект можно вкрячить в нескоьлких проектах :
				[ActiveDirectoryOrientDbEtl,AddressBook_News, Batch_1C_Orientdb]
			2) далее , вокруг контекста можно накидать
За основу можно взять уже реализованую структуру из ActiveDirectoryOrientDbEtl (Person->PersonHelper->Context) 
и в AddressBook_backend.OrientHttpRestHelper
и в Batch_1C_Orientdb.Intranet_POST.OrientREST (это проекте, вообще уже почти модель и часть методов Repo готовы в Helpers)
а блок с batch можно напряму
а модель по принципу из AddressBook_backend.Models

/*
Repository {
	...
string OrientDbContext.Get<T>(int ID); where T: IOrientPOCO{...}
	...
}
*/

включив в него методы, которые частично пойдут из
	AddressBook_News.News_API.NewsAPI.Helpers.OrientNewsHelper,
	AddressBook_News.News_API.NewsAPI.Helpers.OrientDB_HttpManager,
	AddressBook_News.News_API.NewsAPI.Helpers.OrientDB_HttpManager
	ADBook_API.Helpers.OrientHelper.cs
Наиболее похожая аналогия Intranet.Models.IntranetHelper
так как не зависимо от приложения, в итоге мы кидаем в orient,
или команду sql  или параметр к процедуре черз API или те же параметры через драйвер.
Репозиторий оборачивается в UnitOfWork со всей бизнеслогикой.

/*
UnitOfWork {	
	...
Repository<Person>() EmployeeRepo;
Repository<Unit>() WorkPlaceRepo;
	...	
	sring GetAllPersonManagers(string AccountName_)
	{
		...
string EmployeeRepo.GetManagerByAccountName(AccountName_){...}
		...
	}
	...
}
*/

Общая линия сменится с
DB->(OrientNews)->(OrientDB_HttpManager/OrientNewsHelper/)->(ControllerWebAPI + Logic)
на 
DB->Repository->UnitOfWork->Model->(CntrollerWebAPI no Logic)

