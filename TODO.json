
	TODO[
					
			arrange[				
				-> sort unsorted of watchlist
				-> core projs arrange
					-> checkers - make base for sandbox code tamplates
					-> mvcWebPackGulpReact - gulp webpack configs and view/model decomposition
						-> mvcBulkOverall2 extendes mvcWebPackGulpReact
					-> mvcCoreCheck - core vies, partial views					
					
				-> js projs rearrange 
					-> move all to folders in js SandBoxCodeTemplates
						-> leaflet_boat.js,leaflet_boatmarker.js - rotatable leaflet marker
						-> leaflet_pretty.js - leaflet pretty
						-> mapbox_pretty.js - mapbox pretty
						-> requireJsCheck - require js 
						-> modulesCheck - js modules for node 
						-> mapboxCheck, leafletCheck - map frameworks native checkers
						-> leaflet - leaflet ?working with cameras
						-> jstree - js utilities
						-> hw - js utility code
						-> BOXbundle,geoposPlanPictureOld - drag n drop partly logic
						-> boatMarkerCheck - leaflet boat plugin 
						-> leafletBulkSandbox - leaflet SB
						-> mvcReactReduxCheck - event bus
					
				no particular intrest core folder - 
					mvcWebpckGulpCheck, mvcWebPackCheck, mvcReactCheck, mvcGulpCheck
					
				no particular intrest js folder - 
					webpackCheck
			]

			code[
							
				projs[
					
					-> checkers
					[

	-> async and multithreading
	
					]
					
					-> MSA template Core SB MVC 
					{
						progShema:[
							DDD 
							sql(ms,postgre),nosql(mongo,neo4j),amqp(rabbit+netservicebus,masstransit),
							cashing(reddis)
							
							front
							PWA progressive web app
							(angular,react,vue)
							(graphql vs REST,?mongoose)
							(?rendering,?testing)
						]
						
	TODO:[

	09.06.2019 4h20m -> chat dockerize 
	[
		-> run boilerplates for rem images 
		
		https://docs.microsoft.com/en-gb/aspnet/core/host-and-deploy/docker/building-net-docker-images?view=aspnetcore-2.2
		https://github.com/dotnet/dotnet-docker-samples/tree/master/aspnetapp
		https://github.com/docker/labs/blob/master/windows/windows-containers/WindowsContainers.md
		https://docs.docker.com/docker-for-windows/	
		https://docs.docker.com/docker-for-windows/troubleshoot/#limitations-of-windows-containers-for-localhost-and-published-ports
		https://docs.docker.com/v17.09/get-started/part2/#log-in-with-your-docker-id
		
	]			
		
		-> int ids
		-> neworder generate data
		
		-> angular front
		
		-> heapsort check/rep
		
		-> timsort (insertion + merge)
		-> cubesort
		-> check or repai heapsort before intosort
		-> introsort (quick + heap)
		-> linked list merge sort

		-> weighted delimeter
		-> baloons arrow

		

		-> new 1-8 1-1 and 8-8 fluentAPI model
		-> basic create related API
		
		-> move checkers to crmvcsb
				
		-> mixer of colours object nodel
		-> hierarchy category,facility,item + cameras model
		-> auto/integrational tests
		-> validation, exception logging
		
		-> checkers async and multithreading
	
	]
	
	BACKLOG/ROADMAP:[
				
		-> rabbitmq
		-> mongoDb
		-> neo4j
		-> Akka
		
		-> authentication authorization
		
		-> load files/inages func ad dto front and back
		
		-> Smaple chat react front
		
		-> add flattering to automapper, 
			mapping API command property payload to whole EF object
				API{"P":{class}} -> EF{class}
			
		-> partial update of null web api content properties
		-> logging
		-> put,delete commands with url parameters
		-> controller status response and human readable responses
		
		-> use interface as controller parameter
			?is it worth or possible
		
	]

	DONE:[
	
		<- done 02.06.2019 01:53 2h -> PersonAddsPost	
		<- done 02.06.2019 14:40-14:50 10m -> get posts by person
		<- done 02.06.2019 12:14-14:40 2h30m -> get posts by blog
		<- done 02.06.2019 12:14-14:50 2h30m -> get blogs by person
		<- done 02.06.2019 15:13-15:53 40m -> person removes post
		<- done 02.06.2019 15:53-16:03 10m -> person updates post

		<- done 04.06.2019 5h -> react boardGame checker

		<- done 04.09.2019 23:53 05.09.2019 2:40 2h50m -> SignalR chat checker

		<- done 05.06.2019 2h30m -> Login and authenticate template  
		<- done 06.06.2019 7h22m -> Identity on MVC views with Identity DB mogrations
		<- done -> account page and chat room redirect routing
		<- done 07.06.2019 5h3m -> authorization token and cookie redirect on mvc startup setup
		<- done 08.06.2019 2h47m -> core view routing
		<- done 08.06.2019 2h15m -> core mvc with auth and defailt ui mvc           
			rounig with API/areas for view and controller
		{
		
			=> gen mvc 
				dotnet new mvc -o {folder} -au individual
			=> add areas 
				options.AreaViewLocationFormats.Add("API/Areas/{2}/Views/{1}/{0}.cshtml");
			=> remove compatibility 
				//.SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
			=> move MVC v,c folders
			=> include 
				@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
				from _viewimport on every layout
			=> leave basic routing in startup.cs [
			  routes.MapRoute(
				   name: "areas",
				   template: "{area:exists}/{controller=Home}/{action=Index}/{id?}"
				   );
				   
					routes.MapRoute(
						name: "default",
						template: "{controller=Home}/{action=Index}/{id?}");
			]

			=> dont include in startup.cs
			it conflict with scafoldede razor pages sigin

				services.AddAuthentication
					0 ?CookieAuthenticationDefaults


		}
		<- done 08.06.2019 4h -> move auth
		
		<- done 09.06.2019 1h45m -> signalR and auth user and messages binded
		<- done 10.06.2019 01:24 1h31m -> signalR work queued,started,finished moque
		
		<- done 12.06.2019 3h30m -> react timer sliders 
		<- done 12.06.2019 2h8m -> react todo 		
		
		<- done 13.06.2019 5h06m -> order Ef core Orders model, migration and seed Many-to-many 
		<- done 13.06.2019 5h06m -> Ef core Orders model, migration and seed Many-to-many		
		
		<- done 14.06.2019 1h20m -> cqrs add and multiple context Autofac resolve
		<- done 14.06.2019 40m -> order created
		<- done 14.06.2019 30m -> props changed				
		<- done 14.06.2019 1h20m -> order cqrs add and multiple context Autofac resolve
		<- done 14.06.2019 40m -> order created
		
		<- done 15.06.2019 40m -> order accounter interfaces
		<- done 15.06.2019 1h10m -> order new API, BLL interfaces
		<- done 15.06.2019 1h5m -> order deliverer, clenup
		<- done 15.06.2019 -> order fluent API model and migration
		<- done 15.06.2019 12:35-16:02 3h30m -> git merge crmvcsb -> master, order -> master, cleanup master,crmvcsb,order

		<- done 01.07.2019 4h -> KATAs heapsort 
        <- done 01.07.2019 1h -> test server project multiple build tasks, and integrate run
        <- done 1h -> integration tests        
        
        <- done 02.07.2019 1h -> integration tests
        <- done 02.07.2019 2h -> quicksort        
        <- done 02.07.2019 1h10m -> heapsort
        <- done 02.07.2019 1h45m -> linked nodes reverce, polindrome check


        <- done 04.0.2019 2h30m -> merge sort
        
        <- done 05.07.2019 1h -> insertion sort 
        <- done 05.07.2019 1h -> sorting tests

        <- done 07.07.2019 2h ->  insert sort rep
        <- done 07.07.2019 2h  -> heapsort above heapify
		
		<- 15.07.2019 1h -> new order model
		<- 16.07.2019 1h -> new order migration
		
	]	
	 ~87h: 10m in 15d

					}
														
					-> react SB{
					
<- done 12.06.2019 3h30m -> react timer sliders 
<- done 12.06.2019 2h8m -> react todo 


					}
					
								
					c++[
				
					overall
						->Employee class
						->OpenGltutorials
						->linked list reference graph
					
					SB[
			-> Moove classes from CT to SB3 

			sharefolder\Files\Repo\Mercurial\SBbr\MainBr\SB3_new_output
					]
				
				]
							
					NSQLmanager[
							
						Info[
							
							VS_ref[
			Install-Package xunit -ProjectName NSQLManagerIntegrationTests
			Install-Package moq -ProjectName NSQLManagerIntegrationTests
			Install-Package Newtonsoft.Json -ProjectName NSQLManagerIntegrationTests
			Install-Package Microsoft.AspNet.WebApi -ProjectName NSQLManagerIntegrationTests

			Install-Package NUnit -ProjectName NSQLManagerIntegrationTests
			Install-Package NUnit.ConsoleRunner -ProjectName NSQLManagerIntegrationTests
			Install-Package NUnit.Console -ProjectName NSQLManagerIntegrationTests
			Install-Package NUnit3TestAdapter  -ProjectName NSQLManagerIntegrationTests
			//OWIN install
			Install-Package Microsoft.Owin.Security.OAuth 
			Install-Package Microsoft.AspNet.Identity.EntityFramework 
			Install-Package Microsoft.Owin.Host.SystemWeb 

			//not used
			Install-Package Microsoft.AspNet.Identity.Owin 
			Install-Package Microsoft.AspNet.WebApi.Owin 
			Install-Package Microsoft.Owin.Cors 
							]

							,GitMoove[
							
			cd C:\workflow\projects\Dev\gitLab\nsql
			git init
			git remote add ns http://gitlab.nspk.ru/Neprintsevia/NSQLManager.git
			git pull ns prod_moove

			cd C:\workflow\projects\Dev\gitLab\napi
			git init
			git remote add ns http://gitlab.nspk.ru/Neprintsevia/NewsApi.git
			git pull ns prod_move

			cd C:\workflow\projects\Dev\gitLab\napi
			git clone http://gitlab.nspk.ru/Neprintsevia/NewsApi.git
			cd C:\workflow\projects\Dev\gitLab\napi\NewsApi
			git checkout nsql_mng

							]
							,MergeManualTotalCommanderSynch[

			exceptlist[
			.vs
			.git
			*.config
			Release
			bin
			dll
			*.csproj*
			*.asax*
			libs
			obj
			Properties
			]

			//GET TARGET BRANCH
			cd C:\workflow\projects\Dev\gitLab\napi_nsql
			git clone http://gitlab.nspk.ru/Neprintsevia/NewsApi.git

			cd C:\workflow\projects\Dev\gitLab\napi_nsql\NewsApi

			git branch nsql_mng
			git branch prod_move
			git checkout nsql_mng
			git remote add np http://gitlab.nspk.ru/Neprintsevia/NewsApi.git
			git pull np nsql_mng

			//GET SOURCE BRANCH
			cd C:\workflow\projects\Dev\gitLab\napi_prod_move
			git clone http://gitlab.nspk.ru/Neprintsevia/NewsApi.git

			cd C:\workflow\projects\Dev\gitLab\napi_prod_move\NewsApi

			git branch nsql_mng
			git branch prod_move
			git checkout prod_move
			git remote add np http://gitlab.nspk.ru/Neprintsevia/NewsApi.git
			git pull np prod_move


							]
							,Queries[

			where_composed[
			select from Note where 1=1
			and GUID='30c7fc2b-696a-499f-bb59-2b53f4a4eb5e' 
			and pinned.isTrue=True 
			and published.isTrue=True 
			and in('Authorship')[0].GUID='477a5bf9-1bec-4959-ae7f-35e08bba33b3' 
			order by changed asc limit 4
			]

			QuizSelect[

			select from Quiz where State ='Published' and StartDate between '2017-12-06 00:00:00' and '2018-07-30 00:00:00'
			create vertex Quiz content {"StartDate":"2017-12-03 17:01:01","State":"Published","EndDate":"2018-12-04 01:01:01","QuizDescription":"test quiz with large finish date for publishing","Title":"Test quiz title2"}

			]

							]
							
							,NewsOrientQueries[

			//Traverse Commentaries to News
			traverse outE('Comment'),inV('Commentary'),inE('Authorship','Comment') from 26:3
			traverse out('Comment'),in('Comment') from 25:4

			//traverse comments to comment
			select from (traverse out('Comment') from 26:5)
			where commentDepth >=0 and commentDepth <=3

			//traverse up fromcomment to news
			traverse in('Authorshp','Comment') from (select from 24:53)

			//Get persons from news
			Select expand(a1) from(Select inE('Authorship').outV('Person') as a1 from 26:1 )

			//Person authorships
			traverse out() from 31:6
			//Author find
			select expand(in('Authorship')) from 23:1

			//Check Notes without authorship
			select from Note where in('Authorship').@class!='Person'


			//Select from News with depth
			select from (traverse outE('Comment'),inV('Commentary'),inE('Authorship','Comment') from 26:2)
			where commentDepth >=2 and commentDepth <=2 

			//
			traverse out('Comment','Authorship'),in('Comment') from 32:7

							]
												
							,Shema[
							
							
							//--------------------------------

							//Class  model <- done
							(Person) - [Authorship] -> (Commentary) <- [Comment] - (Person)
							(Person) - [Authorship] -> (News) <- [Comment] - (Person)
							(Person) - [Tagged] -> (Tag)
							(Person) - [Liked] -> (Note)
							
							//Relations model -> obsolette

							Post new tag by name, post tag id news id
							person to like

							(Person) - [Authorship] -> (Object{pinned:true})
							News //editable by hardcode string acc group to every tag
							(Person) - [Authorship] -> (Object{"pinned":"true";"published":"true"})
							Commentary
							(Person) - [Authorship] -> (Object) - [Comment{CommentLevel:0+1}] -> (Object)
							
							//updatable by person. cerated by Destiny list
							News
							{
								[not updatable from POST,changes while note POST update]
								public Person author_ { get; set; }

							}				
							//Author never edited from POSTs
							//updatable from UOW
							Commentary
							
							if "Name":null -> если null оставляем как в базе
							if "Name":"" -> если явное "" empty перезаписываем в базе
							
							if author_:null or "" -> не обноялем напрямую,
							только из пользователя при изменнеии объекта
							
							personReturn
							{ 
							  "GUID": "ba124b8e-9857-11e7-8119-005056813668",
							  "division": "Отдел поддержки прикладных систем",
							  "PGUID": "c1b0ff45-5cb1-11e7-8117-005056813668",
							  "phone": "1312",
							  "mail": "Neprintsevia@nspk.ru",
							  "Name": "Непринцев Илья Александрович",  
							  "shortFName": "Непринцев И. А.",
							  "description": "Главный специалист",
							  "itemTitleColor": "rgb(44,50,124)",
							  "templateName": "PersonTemplate",
							  "birthday": "09.03",
							  "colorClass": "c-dit",
							  "departmentName": "Департамент ИТ",
							  "login": "Neprintsevia"
							}
							
							NoteReturn
							{
								
								author personReturn_ {get;set;}
								
								note_ {get;set;}
								
								commentaryCount {get;set;}
								likesCount {get;set;}
								
							}
							
							//--------------------------------

							]
							
							,Migration_sceneries[

				scenery_theoretical[
				 
			//migration scenery

			//collisions check:
			wrtie object no check
			check if exists 
				-> leave as in target DB
				-> delete and create as in source DB

			sort conditional items -> nodes first
				detect if list contains references:
				if contains -> detect referenced classes
				if referenced classes exist in list -> for referenced Nodes preserve ID to Object
				
			for each Node item:
			if no objects in Source exist -> mark as processed
			else for each object -> 
			if no chek -> write when finished 
			if exists target leave 
			-> delete Node 
			-> createne wnode 
			if exists source leave -> ignore
			-| mark as processed

			foreach Reference item
			GUID objects
			-> Get source Nodes
			-> Get target Nodes by Source Nodes Guid
			-> Create Target Relation between Target Nodes
			NOT GUID objects (id only)

			/* ID restoration (too murky):[ */
			(preserve Source ID values to Target created object item,
			check referenced Nodes to created 
			-> if trying to migrate reference but not class it's structural? migrator error)
			],

				GUIDed_Nodes(more realistic):[
			Node always has GUID
			Ref can have no GUID
			take target ref nodes,
			if exist -> allready created
			if not exist -> create relations
			]

							]
						
							news api description[

			Post news
			[METHOD,URL,HEADER,BODY,RESPONSE]
			POST
			http://msk1-vm-ovisp01:8184/api/news2
			Content-Type: application/json
			{"authAcc":"Neprintsevia","pic":"","name":"TestNews3","content_":"news text","description":"","commentDepth":0,"hasComments":false,"likes":0,"liked":false}
			{"PGUID":"000","authAcc":"Neprintsevia","authGUID":"000","authName":"Neprintsevia","pic":"","name":"TestNews","content_":"","description":"","commentDepth":0,"hasComments":false,"likes":0,"liked":false,"@class":"News","GUID":"dac34a61-d01c-487c-8d1e-694f8383a21f","Created":"2017-12-19 09:54:59"}

			Post comment
			[METHOD,URL,HEADER,BODY,RESPONSE]
			POST
			http://msk1-vm-ovisp01:8184/api/news2/b71bec8b-ebac-40ff-852b-ba2ba1bc6d81
			Content-Type: application/json
			{"authAcc":"Neprintsevia","pic":"","name":"TestComment1","content_":"comment text","description":"","commentDepth":0,"hasComments":false,"likes":0,"liked":false}
			{"pic":"","name":"TestComment1","content_":"comment text","description":"","commentDepth":1,"hasComments":false,"likes":0,"liked":false,"@class":"Commentary","GUID":"0a35caf2-1045-47e2-bb41-46c931b6b1da","Created":"2017-12-19 09:57:09"}

			Put News
			[METHOD,URL,HEADER,BODY,RESPONSE]
			POST
			http://msk1-vm-ovisp01:8184/api/news2/update
			or
			PUT
			http://msk1-vm-ovisp01:8184/api/news2
			Content-Type: application/json
			{"GUID":"dac34a61-d01c-487c-8d1e-694f8383a21f","authAcc":"Neprintsevia","pic":"","name":"TestComment2","content_":"comment text updated","description":"","commentDepth":0,"hasComments":false,"likes":0,"liked":false}
			{"pic":"","name":"TestComment2","content_":"comment text updated","description":"","commentDepth":0,"hasComments":false,"likes":0,"liked":false,"@class":"News","GUID":"dac34a61-d01c-487c-8d1e-694f8383a21f","Created":"2017-12-19 10:03:11"}

			GET News\Comment with comments with depth
			/Guid/depthOffset
			http://msk1-vm-ovisp01:8184/api/news2/b71bec8b-ebac-40ff-852b-ba2ba1bc6d81/2
			[{"Name":"Commentary0","pic":"","name":"","content_":"fucking bullshit comentary","description":"","commentDepth":3,"hasComments":false,"likes":0,"liked":false,"@class":"Commentary","GUID":"47eb0894-7fb1-4b24-aabd-77f264537678","Created":"2017-12-18 03:30:10"},{"Name":"Commentary6","pic":"","name":"","content_":"fucking bullshit comentary","description":"","commentDepth":4,"hasComments":false,"likes":0,"liked":false,"@class":"Commentary","GUID":"288fdabd-66c1-4042-be81-d7ff18d864b2","Created":"2017-12-18 03:30:10"},{"Name":"Commentary4","pic":"","name":"","content_":"fucking bullshit comentary","description":"","commentDepth":5,"hasComments":false,"likes":0,"liked":false,"@class":"Commentary","GUID":"16f8988e-beb5-419a-bfb3-f00da0e57af2","Created":"2017-12-18 03:30:10"},{"Name":"Commentary8","pic":"","name":"","content_":"fucking bullshit comentary","description":"","commentDepth":6,"hasComments":false,"likes":0,"liked":false,"@class":"Commentary","GUID":"01396598-0a21-476e-b566-98765f9e2011","Created":"2017-12-18 03:30:10"},{"Name":"Commentary5","pic":"","name":"","content_":"fucking bullshit comentary","description":"","commentDepth":6,"hasComments":false,"likes":0,"liked":false,"@class":"Commentary","GUID":"0a4d8a0b-b034-4249-a717-0bf32fa22034","Created":"2017-12-18 03:30:11"}]

			GET get News with depth
			http://msk1-vm-ovisp01:8184/api/news2/5
			[{"Name":"Real news","pic":"","name":"","content_":"","description":"","commentDepth":0,"hasComments":false,"likes":0,"liked":false,"@class":"News","GUID":"057ba719-bd7e-4827-84b9-33f013765e4a","Created":"2017-12-18 03:28:03"},{"Name":"News1","pic":"","name":"","content_":"fucking interesting news","description":"","commentDepth":0,"hasComments":false,"likes":0,"liked":false,"@class":"News","GUID":"a47a360a-33d7-46fd-8132-0dcdb4aa88fb","Created":"2017-12-18 03:30:09"},{"Name":"News1","pic":"","name":"","content_":"fucking interesting news","description":"","commentDepth":0,"hasComments":false,"likes":0,"liked":false,"@class":"News","GUID":"73e24beb-84bb-4c55-9735-830412a807ea","Created":"2017-12-18 03:30:09"},{"Name":"News0","pic":"","name":"","content_":"fucking interesting news","description":"","commentDepth":0,"hasComments":false,"likes":0,"liked":false,"@class":"News","GUID":"edec4cc2-d66c-4d51-8691-a762e763abf3","Created":"2017-12-18 03:30:09"},{"Name":"News0","pic":"","name":"","content_":"fucking interesting news","description":"","commentDepth":0,"hasComments":false,"likes":0,"liked":false,"@class":"News","GUID":"82f83601-d5cd-4108-b1b7-d27ac5a3933a","Created":"2017-12-18 03:30:09"}]

			GET get news by offset with pinned or published bool conditions. Null values not checkeed so basic Get replacement possible.
			http://msk1-vm-ovisp01:8184/api/news2/GetParam
			shema
			{"offest":[int?],"pinned":[bool?],"published":[bool?]}
			example
			{"offest":"2","pinned":"false","published":"false"}

			]

			qiuiz[

			//return all published
			POST
			http://msk1-vm-ovisp01:8184/api/Quiz
			{"monthDepth":""}

			months depth  in the past 
			{"monthDepth":"-5"}

			]

			GetParams scenery check[

			http://msk1-vm-ovisp01:8184/api/news2
			POST
			{"GUID":"111","content_":" c \"a a\" t "}
			{"GUID":"112","content_":" c \"a a\" t "}
			{"GUID":"113","content_":" c \"a a\" t "}
			{"GUID":"114","content_":" c \"a a\" t "}

			(4 разных body на один url одним методом или на другой урл другим методом для PUT)
			http://msk1-vm-ovisp01:8184/api/news2/update
			POST 
			или
			http://msk1-vm-ovisp01:8184/api/news2
			PUT

			{
			"GUID":"111",
			"pinned": {"isTrue": true}
			}

			{
			"GUID":"112",
			"published": {"isTrue": true}
			}

			{
			"GUID":"113",
			"pinned": {"isTrue": true,"dateChanged": "2018-01-15 10:58:44"},
			"published": {"isTrue": true,"dateChanged": "2018-01-15 10:58:44"}
			}

			{
			"GUID":"114",
			"pinned": {"isTrue": false},
			"published": {"isTrue": false}
			}

			(проверяем разные состояния)
			http://msk1-vm-ovisp01:8184/api/news2/GetParam
			POST
			{"offest":"2","pinned":"false","published":"false"}

			{"offest":"2","published":"true"}
			->//minimal GUIDs 112,113

			{"offest":"2","pinned":"true"}
			->//minimal GUIDs return 113

			{"offest":"2","pinned":"false","author":{"GUID":"ba124b8e-9857-11e7-8119-005056813668"}}
			->//minimal GUIDs return 114

			GP minimal object 
			//вернет пусутое, только для примера параметра
			{"offest":"2","pinned":"false","published":"false","asc":"true","liked":"true","tagg":{"tagText":"tag1"},"author":{"GUID":"ba124b8e-9857-11e7-8119-005056813668"}}


			Like, dislike возвращает необновленное значение количества Like. 
			В базе оно у этому моменту ужеменяется. 
			Возврат объекта меняется для новостей в целом, сюда его подключен позднее.
			//LIKES
			http://msk1-vm-ovisp01:8185/api/news2/Like
			POST
			{"GUID":"113"}

			http://msk1-vm-ovisp01:8185/api/news2/Dislike
			POST
			{"GUID":"113"}


			//TAGS
			http://msk1-vm-ovisp01:8185/api/news2/AddTags
			POST
			[{"tagText":"tag1"},{"tagText":"tag2"}]

			http://msk1-vm-ovisp01:8185/api/news2/DeleteTags
			POST
			[{"tagText":"tag1"},{"tagText":"tag2"}]

			//add tag
			http://msk1-vm-ovisp01:8185/api/news2/ToTag
			//вернет Not Tagged если поввтороно затагать новость на тот же tag
			POST
			{"news_":{"GUID":"112"},"tags_":[{"tagText":"tag3"},{"tagText":"tag4"}]}

			//get by tag to check
			http://msk1-vm-ovisp01:8185/api/news2/GetParam
			POST
			{"offest":"2","tagg":{"tagText":"tag3"}}

			UnTag
			http://msk1-vm-ovisp01:8185/api/news2/UnTag
			//вернет Untagged если новость была затагана
			POST
			{"news_":{"GUID":"112"},"tags_":[{"tagText":"tag3"},{"tagText":"tag4"}]}

			//JSON sheme examples
			//объект для добавления коллекции тэгов
			GP with tagg only
			//вернет, только если были добавлены таги и затагена новость
			[{"tagText":"tag1"},{"tagText":"tag2"}]

			обхект для тагания новости рядом тегов
			//Post param object for tags
			{"news_":{"GUID":"112"},"tags_":[{"tagText":"tag3"},{"tagText":"tag4"}]}


			//Extended object
			"{\"news_\":{\"name\":\"Real news\",\"pinned\":{\"isTrue\":false},\"published\":{\"isTrue\":false},\"hasComments\":true,\"GUID\":\"3644d3ee-f484-4c9c-968b-b97a1b4a0928\",\"Created\":\"2018-01-17 17:24:55\"},\"tags_\":[{\"tagText\":\"tag1\",\"GUID\":\"ebcfcf19-f210-4aa3-aeda-d3f42249600d\",\"Created\":\"2018-01-18 16:54:30\"},{\"tagText\":\"tag3\",\"GUID\":\"8dc4b530-4fbc-4bbd-aa43-fe746754c6f3\",\"Created\":\"2018-01-18 16:54:30\"}]}"
			//Minimal object for news tagging
			"{\"news_\":{\"GUID\":\"3644d3ee-f484-4c9c-968b-b97a1b4a0928\"},\"tags_\":[{\"tagText\":\"tag1\"},{\"tagText\":\"tag2\"}]}"

			]

						]
						
					]

					Quiz[
						
						TODO[
						
			TnT[
				add image 
				var image = document.createElement('img');
				image.src = window.URL.createObjectURL(curFiles[i]);
			]

						actual[
				
				-> Quiz Pass page[

					<- 25.07.2018 17:40 -> pass page CSS
					<- 25.07.2018 17:40 -> paging Start,paging buttons
					<- 25.07.2018 23:23 -> paging events
					<- 26.07.2018 12:10 -> arrow buttons and paging events rep
					-> skip/replay/ list/page question of all
					-> rate
					o- postponned due to clickable svg issue , generate inline CSS svg to ng onclick activate -> svg shevrons, css, right left
					
					Generate Html according to type
					-> plain all questoins with answers on one page 
						one submit
					-> scroll one question by page 
						multiple mini submits 
					-> final page results show, repeat for repeatable
						
					exmpls
					http://angular-data-grid.github.io/demo/bootstrap/multiple.html
					quiz with correct answers
					https://meduza.io/quiz/bublik-ili-prettsel
				]
				
				-> bugs[
				
					-> moove all toggling from factory to classes
					-> Ignore event issue to repair [
						more then 3 events listen ignore issue to repair  
					]

				]
				
				-> tech debt cleanup [
					-> radio button
					-> Htmlitem changed status
					-> share save functionaity betweeen other buttons
					-> save only on post
					-> Remove @Input, generate buttons from Menu List and Edit List with object names						 		
					-> Answer type visual element (checkbox, radio)
					-> pass page 
					-> Remove @Input, generate buttons from Menu List and Edit List with object names			
					-> Quiz item parameters add weeks in year, days in week to Factory	
					-> radio button																				  
					-> Answer type visual element (checkbox, radio)			  
				]
				
				-> features[
					-> split add htmlItem to <label> <item> templates. Pass cssClass to 
					Item and to Item group to change label control display direction 
					-> change model to linked list	
					-> Model tree change to contain selected
					-> Save model tree
					-> colorChange component with range and dropbox provides values for grad gen
					-> pass page
					-> move nsql manager to core
					-> Back model arrange for itemparameters and quizcontrolls
					-> manager CRUD QuizeList with ref to person
					-> add id to Quiz, edited state
					-> add,delete,update edited quizes
					-> angular get by id
					-> manager send by id
					-> angular draw quiz by quizControlls

					-> ubuntu host check

					-> test question itemparameters copy
					-> New event sheme

					-> answer types to add 
						-> picture
						-> Correct answer for victorine according to type	
				]

				<- done[
					
					<- 17.04.2018 done -> New model menu,list-menu,edit-menu added 
					<- done -> New model create templates rebuild 
					<- done -> drop down question type model
					<- done -> question type init
					<- done -> dropdown select event DOM change
					<- done -> questions model add
					{textbox,radio button,checkbox{pic realization},dropdowns to names}
					<- done -> draw question DOM
					<- done -> receive input
					<- done -> print input on submit					 
					<- done -> remove events duplicates in edit-menu, edit existing and add new differ by flow
					<- done -> Detect current nested Nodecollection class type, to add new Items to empty collection 
					<- done -> Make editable instance of item [
					<- done -> to mmake it discardable
					<- done	-> make converter from item to new]		
					<- done -> parameters collection ItemParameters
					<- done -> QuizParameters
					<- done -> Collection sort asc|desc
					<- done -> Node key init rep
					<- done -> ModelContainer checkToggle for itemparameter
					<- done -> ModelContainer show trigger for itemparameter
					<- done -> DatePicker select current date with mouseup 
					<- done -> add correct two way binding to node.html checkboxes, datetime
					<- done with static ModelContainer fields.-> add Form nad Subbmit to menu-edit.html
					<- done with css display atr, mouseup and ngModelChange-> repair click need
					<- 15.05.2018 done -> new GapPicker
					<- 16.05.2018 done -> Input most usefull types test (textbox,radio,check,date,color,range,files) with NgBinding,value display and form submit model + template
					<- 17.05.2018 done with HtmlItem class and its childs -> Change ItemParameter model to NodeCollection with input type specific attrs 
					x- 17.05.2018 cancelled (no need cause model updates) -> Rep nested tmplate ngModel update 								 
					<- 18.05.2108 done -> Edit Node for HtmlItem
					<- 18.05.2108 done -> Edit Nodes list for HtmlItem collection
					<- 20.05.2018 done -> check flex [
					<- 20.05.2018 done -> correct CSS flex container display
					<- 20.05.2018 done -> JS gen div add flex and CSS [
						<- 19.05.2018 done -> gen div
						<- 19.05.2018 done -> load JS lib external
						<- 19.05.2018 done with  script.onreadystatechange = callback; script.onload = callback; -> use external lib
							]
						]
					<- 21.05.2018 14:19 done -> CSS calculated var heights, top, bottom, gradients. Tob bottom shadows.
					<- 22.05.2018 done -> change every HtmlItem child class to cssType receive
					<- 24.05.2018 done -> handle cssClass in all nodes for all HtmlItem types [
					<- 22.05.2018 done -> nodeItem rewrite for one item.csstype binding
					<- 22.05.2018 done -> change nodes and nodegr to cssType
						]	
					<- 22.05.2018 done -> repeat checkbox
					<- 27.05.2018 done -> add dropbox ts
					<- 27.05.2018 done -> change item-ng
					<- 28.05.2018 done -> custom multi dropdown
					<- 29.05.2018 done -> custom multi dropdown CSS, events
					<- 30.05.2018 done -> Add new Question parameters [
					<- 30.05.2018 done -> question text
						<- 30.05.2018 done -> question type with dropdown {textbox,checkbox,radio,rate with dropdown}
						]
					<- 30.05.2018 done -> Add new Answers according to Quiz,Answer types[
						0 or Correct only for text, 1-* for radio,check,rate. rate max points:number
						-> textbox answer (1-5 for dropbox)
						-> Answers according to type
						]
					<- 30.05.2018 done -> repair edit menu buttons disable
					<- 31.05.2018 done -> Add save, add new button disabled
					<- 31.05.2018 done -> Add question type check for answer amount to type accordance
					<- 31.05.2018 done -> Add inform about question amount invalid to type
					<- 02.06.2018 done -> Delete item
					<- 02.06.2018 done -> Add Question button disable	
					<- 02.06.2018 done -> Copy question
					<- 11.06.2018 12:31 done -> array deep clone recursive. No class segregation
					<- 12.06.18 16:42 done -> Classes nested array deep copy[
						<- 12.06.18 14:00 done -> Repair array deep copy, add nested itemparameter recursive copy
						<- 12.06.18 15:00 done -> rearrange HtmlItem, QuizItem classes to deep copy ItemParameters
					]
					<- 14.06.18 23:27 done -> moove nodeToEdit =null from menu-edit to CheckAnswerAmount
					[ delete question enables save_,add_new_ buttons even if >1 question present and Text type selected.
					cause ModelContainer.nodeDeleted nodeToEdit =null]
					<- 22.06.2018 20:41 done -> Http POST/GET 
					<- 22.06.2018 20:41 done -> angular POST CORS
					<- 26.06.2018 done -> analyze quiz model to array without collection change costs 
					<- 26.06.2018 done -> New HtmlItems, new QuizItems
					<- 27.06.2018 done -> new ItemParameters + test
					<- 27.06.2018 done -> new FactoryNew + test		
					<- 04.07.2018 done -> new Html Templates (ItemList,Item,Check,radio,text)
					<- done 18.07.2018 14:40 -> to new model
					[
						<- done 05.07.2018 11:00 -> numberpicker
						<- done 05.07.2018 11:00 -> datepicker
						<- done 06.07.2018 16:00 -> QuizHtmlItems to component
						<- done 06.07.2018 16:00 -> Instance checker
						<- done 06.07.2018 16:00 -> Buttons to component
						<- done 07.07.2018 15:00 -> Buttons with objects
						<- done 07.07.2018 15:00 -> QuizHtmlItem
						<- done 09.07.2018 17:00 -> new Flexbox with classes and flex columns formatting
						<- done 09.07.2018 17:00 -> menu-item, new menulist
						<- done 09.07.2018 17:00 -> Quiz itemControlls	
						<- done 10.07.2018 13:30 -> Add new Button
						<- done 10.07.2018 13:30 -> Question,Answer button names
						<- done 11.07.2018 14:00 -> new Deep copy with object instance, nad nested collections
						<- done 11.07.2018 17:00 -> Edit menu buttons Save, Cancel + events
						<- done 12.07.2018 12:00 -> correct collection add,update with null key
						<- done 12.07.2018 12:00 -> itemControls Name to object name bind
						<- done 12.07.2018 12:00 -> Question ItemParameters change to textbox and drop box with events
						<- done 12.07.2018 13:50 -> Quiz checlbox cycle change event, display
						<- done 12.07.2018 21:00 -> Question edit events Button enable,disable (Disable Save when TextBox and answer =0 or >1; Disable AddNew when TextBox and questions >0)
						<- done 12.07.2018 21:00 -> Question name, values to item imp exp	
						<- done 12.07.2018 21:30 -> display question value (text)
						<- done 12.07.2018 21:30 -> Answer item parameters 
						<- done 13.07.2018 15:00 -> add weeks in year, days in week to Factory
						<- done 13.07.2018 15:00 -> Question,answer Item parameters
						<- done 16.07.2018 22:30 -> Http POST,GET
						<- done 18.07.2018 14:40 -> Quiz nested class hierarhy from json instantiate
						<- done 18.07.2018 14:40 -> from JSON to QuizItems, ItemControlls convert done with [
							//Angular IO http GET,POST responses
							//https://github.com/angular/angular/issues/23778
							//https://github.com/imp908/Quiz/blob/538b2c368da3db045ad7e86cd7e36a933452f6d4/src/quest/Quiz/Http/quiz.service.ts	
							//https://stackoverflow.com/questions/22875636/how-do-i-cast-a-json-object-to-a-typescript-class
							//https://stackoverflow.com/questions/22885995/how-do-i-initialize-a-typescript-object-with-a-json-object/22886730#22886730
						]
						<- done 18.07.2018 17:00 -> Quiz NSQL repo,UOW
						<- done 18.07.2018 17:00 -> Quiz Back Napi get,post		
					]
					<- done 19.07.2018 17:00 -> Http POST,GET model sync [
					
						<- done 19.07.2018 17:00 -> Nested JSON object to type convert
						<- done 19.07.2018 17:00 -> Datepicker error
						<- done 19.07.2018 12:25 -> Drop downs values collection
						<- done 19.07.2018 11:27 -> Back POCO new added
						<- done 19.07.2018 11:27 -> Back POCO item controlls gen remove
						<- done 19.07.2018 11:27 -> Angular POCO typeinit added			
					]
					<- done 21.07.2018 01:40 -> Routing, erropage404,passpage style gen
					
				]

							]		

						]
								
						WantedDesciption[
							Quest type: NPS - баллы для департамента, "Затрудняюсь ответить" 
							Question types: [radio, checkbox, + texbox], textbox, dropbox,pictures
							export excel
							{person}-[quested]->{quiz}
							
							quiz -> [
								replayable: not saved but started again, 
								anonimous: only answers counter, no person relation
							]
								questionarie -> [get answers only]
								victorine -> [correct answer exists]
							- > 
							textbox -> textbox answer
							checkbox -> several answers
							radio button -> several answers, only one selected
							dropbox rate -> several rated items with rate gap
						]
						Examples[
							http://diletant.media/personality_test/test/39962349/
							
							CSS gradients
							https://uigradients.com
							
							MDB //Boostrap material design
							https://mdbootstrap.com/components/buttons/
											
							https://meduza.io/games/perezhit-tyurmu-maloy-krovyu										
							
						]
						Description[
							I. install packages
							//after git pull npm folder in parent application folder need to be installed 
							npm install

							//for ng-bootstrap (ngbbootstrap) used for datepicker, toltips, dropdown
							//https://github.com/ng-bootstrap/ng-bootstrap
							npm install --save @ng-bootstrap/ng-bootstrap

							//for bootstrap css datepicker 
							//obsolette in Quiz 4
							npm install jquery — save
							npm install jquery jquery-ui --save
							//+ bootstrap css in styles import
							//add to angular-cli.json 
							"scripts": [
							"../node_modules/jquery/dist/jquery.min.js"
							,"../node_modules/jquery-ui/jquery-ui.js"
							
							//ngx-bootstrap
							
							//Upgrade 5.1 to Angular 6
							https://update.angular.io/
							
							npm install -g @angular/cli
							npm install @angular/cli
							ng update @angular/cli				
							ng update @angular/core				
							ng update @angular/material				
							ng update

							
							//angular 6  Cannot find module 'rxjs-compat/Observable
							npm i rxjs-compat
							npm install rxjs@6 rxjs-compat@6 --save 
						]
				
			  
						]
						ObjectsActual[
							INode,Icollection<INode> ,INodeCollection
							./Models/POCO.ts
							
							Node;
							Collection_<Node>;
							NodeCollection:Node;
								+Collection<NodeCollection>
							HtmlItem:NodeCollection;
							
							//obsolette
							ItemParameter:NodeCollection{					
								cssType (textbox,checkbox,radioButton)=> <Input type="">
								value,valueType => rresult element value (true,false,datetime,checked)
								templateClass => to detect in template : 
									datetime fields for datetimepicker draw
									gappicker for gap if repidet draw
								cssClass => 
							}
							
							//New
							HtmlItem:NodeCollection
								+cssClass
							
							
						]
						Design[
			//Front back shema of Constructor and Passpage
			//Main style names - Meduza (all features), Echo (minimum features)
			//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

				constructor{
					
						QuizStatistics{
							num:passedQuantity;
							num:rejectedQuantity;
							num:passedPercent;
							num:rating:
							Question:mostPopularquestion;
						}
						QuizControls{
							bool:aftertestStatisticsShow;
							bool:listItem;				
							bool:anonimous;
							datetime:startdate;
							bool:replayable;
							datetime:gap;
							
						}
						Quiz{
							:Back{		
								itemParameter:QuizControls				
								HtmlItem:QuizStatistics;
							}
							:Front{
								?quizOrVitorine:<-DropBox[Quiz,Victorine] default victorine;
								listItem:bool;<-checkbox; default false //all questions on list, one question per list with scroll buttons
								anonimous:bool<-checkbox; default true;
								bool:aftertestStat<-checkbox default true; //show question percent statistic after test is passed
									Statistic: 
										checkbox:question percent; - > collection item show toggle;
										checkbox:most popular question; - > collection item show toggle;
								date:startdate<-Collection<HtmlItem>{[datepicker]} default null;
								replayable:bool; <-checkbox default false;
									-[clicked]-> Collection<HtmlItem>{show:toggle; [datepicker,numberpickers (Timepicker)]}
							}
						}
						
						Question{
							:Back{
								QuestionText:string;
								Collection<HtmlItem>;[
									Textbox - Text answer,
									CheckBox - Multi answer,
									Radio|DropDown - select one from variants,
									DropDown - rate
									?Picture [CheckBox,Radio,DropDown] - select picture 
								]
								Rquered:bool->Skippable;[
								]-[listens]-> change question requered parameter 
								bool:DisplayQuestionStat;
							}
							:Front{
								QuestionText:string;
								string:QuestionText
								Collection<HtmlItem>:
									Collection<HtmlItem>;[
									Textbox - Text answer,
									CheckBox - Multi answer,
									Radio|DropDown - select one from variants,
									DropDown - rate
									?Picture [CheckBox,Radio,DropDown] - select picture
								]-[emits]-> change available question amount (1 for text box, several for others)
								Skippable:bool;[
								]-[emitts]-> change question requered parameter -> Rquered
								bool:DisplayCorrect;
								bool:DisplayPercent;
							}
						}

						Answer{
							:Back{
								string:answerText;
								bool:correctAnswer;
								string:correctAnswerCommentary
							}
							:Front{
								answer text;
								bool:correctAnswer;
								string:correctAnswerCommentary
							}
						}
						
						
					
				}

			passpage{
				:Front{
					
					Greeting page{
						> central box
						> background
						
						string:quiz name;
						string:quiz dexcription;
						num:passed amount;
						num:quiz rating;
						
						> start button
					}
					
					QuestionPage{
						: OneQuestion 
							number:question/from all
							Question,
							answer variant HmlItem
							:unskippable
								wait answer select -[amit]-> display button next; 
							:Skippable 
								> button next; button previous;
						:ListQuestions
							> row Question Number, question text 
							> row list of all htmlitems 
								:unskippable
									print requered after submit
								:skippable
									:showstat > statistic page
									:!showstat > 		
					}
				}
			}

			////////////////////////////////////////////////////////////				
						]
						EventArhitecture[
						
			Stage_1:
				Items:
					NdTE,QzTE,QsTE,AwTE - null;
				Buttons:
					AddNew-[Obj_.typeOf:NodeCollection]->NodeToEdit=Qz;QzTE=Qz;
					Edit-[Obj_.InstanceOf:Qz]->NodeToEdit=Qz;QzTE=Qz;
						->[Stage_2]
					Copy-[==Edit create copyTo new object]
						->[Stage_2]
					Save-[Obj_.InstanceOf:Qz]->NodeToEdit:Obj_;QzTE,NdTE=null;
					Delete-[Obj_.InstanceOf:Qz]->NodeToEdit:Obj_;QzTE,QsTE,AwTE=null;NdTE=null;
				
				OnIn:		
					checkQuestionType();
				
			Stage_2:
				Items:
					NdTE:Quiz;QzTe:Quiz;
					QsE,AwTE-null;
				Buttons:
					AddNew,Edit,Copy,Delete,Save-[==Stage_1 Qz replace Qt]->;
					DropBox QuestionType-[HtmlItem]
						->checkQuestionType()			
						
					checkQuestionType(){
						->if TextAnswer 
							{Answers >1} disable Save,SaveNew,AddNew:Aw;
							{Answers =1} enable Save,SaveNew
							{Answers =0} enable AddNew;
						->if !TextAnswer {} enable Save,SaveNew,AddNew:Aw;
					}
				
				OnIn:
					checkQuestionType();
				OnOut:
					checkQuestionType();

			Stage_3:(Qz==Aw)
				AddNew,Delete-[]->
					checkQuestionType();
			ItemEditWindow{
				Save
				
				Question:AnswerTypeDropDown(isTextAnswer?)
			}

			ItemSelect{
				Add New,Edit,Copy,Delete
			}

			button with object
			every click to modelstate(button_,obj_){
				detect button type, change state 
				
				send efresh evvent // all components subscribe
			}



			|Menu|QuizList

			[Quiz,Question,Answer]
			Menu|AddNew Quiz|MenuEdit|new Quiz
			Menu|AddNew Quiz|Menu|QuizToEdit selected Quiz
			Menu|Edit Quiz|MenuEdit|existing Quiz
			Menu|Copy Quiz|MenuEdit|clonned Quiz
			Menu|Delete Quiz|Menu|Quiz list selected

			MenuEdit Quiz|AddNew Question|MenuEdit|new Question (save button is on)
			MenuEdit Quiz|Edit Question|MenuEdit|existing Question{
				checkQuestionState();
			}
			MenuEdit Quiz|DropDownChange|MenuEdit|Question{
				checkQuestionState();
			}
			MenuEdit Quiz|Copy Question|MenuEdit|clonned Question{
				checkQuestionState();
			}
			MenuEdit Quiz|Delete Question|MenuEdit|Question list selected


			checkQuestionState(){
				if((Answers>1 && Type=="Text")){
					disable AddNew
				}
				if(Answers=0){
					disable Save
				}	
			}
						]
						BusinessFunctionalRequirements[
							http://confluence.nspk.ru/pages/viewpage.action?pageId=11380023
							
							questions[
							
			-> Как решать конфликты списков пользователей?
			-> Когда актуализировать  списки?
			-> Как осуществляется публикация опроса? (по таймеру с даты доступности, кликом инициатора, кликом админа)
			-> Как осуществляется информирование пользователей, в какой момент?
			-> Кто и что имеет право создавать (Админ только роли или еще Quiz, Инициаторы только Quiz или редактировать чужие, создание и привязка FocusGroups на ком?)

							]
						]
						MileStones[
						
							1я очередь – предполагаю последнюю неделю июня
								Показываем функционал и стиль страницы формирования Quiz, страницу прохождения.
								Результат – утверждаем интерфейс и стили. По желанию дополняем параметры Quiz.
							2я – очередь – если надо меняем интерфейс/стиль,  добавляем викторину – правильные ответы, 
								Статистика прохождения (и для викторины обычных Опросов тоже) (%, количество, правильный ответ, сразу, после показывать).
							3я – очередь если интерфейс им подходит, на том же чем создаются квизы,  конструктор ролей –для  
								админов, конструктор фокус групп. 
								Если интерфейс не подходит – опять интерфейс , показ далее к этому пункту
								+ полный бэк для этого дела (создание ролей групп, связи, таймер)

						]
						
					]			
					
				]
								
				ProofOfConcept[
				
					->NOSQL
					[
						-> Linq from custom object to custom string[
							<- done for equality for sample properties int,bool,string
						]
						-> custom expression from nodes concat
						-> Neo4j and Mongo repos add
					]					
					-> Polinom Parse
					[
						parse *^/ to expressions and add priorities for exprs
					]
					
					-> Command line Console parameters parse app dll -> to SB
					-> Multithread socket message ping pong -> to SB
					-> Pluggin/addon architecture -> to SB
					-> web api null/empty input partial update
					-> kibana
				-> influx db
				]
			
			]
			
			read[

				intrinsic ienumerable ienumerator
				finilizer 
				disposable
				using null
				values in stack
				async state machine
				left join link
				partially sorted list search
				
				Intrinsic dictionary
https://en.wikipedia.org/wiki/Memoization
https://en.wikipedia.org/wiki/Perfect_hash_function
https://en.wikipedia.org/wiki/B-tree
https://en.wikipedia.org/wiki/Hash_table
https://blog.markvincze.com/back-to-basics-dictionary-part-1/#separatechaining
https://blog.markvincze.com/back-to-basics-dictionary-part-2-net-implementation/
				LINQ deferred
				TPL async/multithread
				[
				
threading[

	interlocked:[
		atomic actions on variables 
		(increment,decrement,add,
		exchange(retunrs original value, atomicaly sets new), 
		memorybarier(cur thred proc cannot reorder mem instr before membar call))
	]
	manualreseteevent[
		mre
		WaitOne() block, Set() release, Reset() reset to blocking;
		
		thread which use mre.WaitOne() blocked until mew.Set() is called.
		then all threads unblocked until mre.Reset() is called
		
		thread calling .Reset() - controlling mre
	]
	menualeventresetslim[
		used when event not leaves process boundaries and wait time is relatively small
			.Dispose() -> when all threads using mres completed
			.Reset() -> when no threads using mres		
	]
	monitor[
		locking critical sections of code
		Monitor.Enter(var);
		Monitor.Exit(var);
		
		private object objLock = new Object();
		lock(objLock){
		
		}
		
		> lock any object on demand
		> unbound can be called directly from any context		
		
	]
	mutex[
		private xtatic Mutext mtx = new Mutex();
		
		mtx.WaitOne();
		
		mtx.ReleaseMutex();
		
		mtx.Dispose();
		
		> must be disposed
		> WaitOne(seconds) false if no other thread aquired ownership
			, then must not call ReleaseMutex but return to calling thread
		> enforces thread identity can be release only by thread acquired it
		> WaitOne calls count ==  ReleaseMutex calls count in method
		
	]

]

async:
https://devblogs.microsoft.com/pfxteam/executioncontext-vs-synchronizationcontext/
https://devblogs.microsoft.com/premier-developer/dissecting-the-async-methods-in-c/
https://weblogs.asp.net/dixin/understanding-c-sharp-async-await-1-compilation
https://blog.stephencleary.com/2013/11/there-is-no-thread.html
https://msdn.microsoft.com/en-us/magazine/jj991977.aspx
	await inside lock lead to deadlocks:
		lock(){
			await 
		}

	?object lock types
	
				]
				GC
				SQL[
//Joins Hash, merge
https://blogs.msdn.microsoft.com/craigfr/tag/joins/
https://www.sqlshack.com/hash-join-execution-internals/
https://sqlity.net/en/1490/a-join-a-day-the-hash-join/

CTE, 
Database design indexes
Manage Monitore and Tune Execution Plans
Internals and Architecture
https://docs.microsoft.com/en-us/sql/relational-databases/performance/execution-plans?view=sql-server-2017

analysing a query
https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-2008-r2/ms191227(v=sql.105)

https://blogs.oracle.com/oraclemagazine/on-transaction-isolation-levels

https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/snapshot-isolation-in-sql-server

https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch
https://en.wikipedia.org/wiki/B-tree
https://en.wikipedia.org/wiki/Hash_table
https://docs.microsoft.com/en-us/sql/relational-databases/indexes/indexes?view=sql-server-2017
https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-2008-r2/ms177443%28v%3dsql.105%29
https://www.red-gate.com/simple-talk/sql/t-sql-programming/questions-about-t-sql-transaction-isolation-levels-you-were-too-shy-to-ask/
https://docs.microsoft.com/en-us/sql/relational-databases/ghost-record-cleanup-process-guide?view=sql-server-2017
]
				algorithms
				architecture
				lock resolve
HTTP
https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol
REST
https://en.wikipedia.org/wiki/Representational_state_transfer

				db locking types;
				optimistic, pessimistic;
MVC5 lifecycle
https://www.dotnettricks.com/learn/mvc/aspnet-mvc-request-life-cycle
https://docs.microsoft.com/en-us/previous-versions/aspnet/bb470252(v=vs.100)
IPC_and_synchronization
[
semaphore,mutex,monitor,barier
	https://en.wikipedia.org/wiki/Inter-process_communication
	https://en.wikipedia.org/wiki/Mutual_exclusion
	https://en.wikipedia.org/wiki/Semaphore_(programming)
	https://en.wikipedia.org/wiki/Monitor_(synchronization)
	https://en.wikipedia.org/wiki/Lock_(computer_science)
	https://en.wikipedia.org/wiki/Concurrent_computing
]
LINQ 
https://linqsamples.com/tutorials/deferred-and-immediate-execution-in-linq
http://linq101.nilzorblog.com/linq101-lambda.php
https://codeblog.jonskeet.uk/2011/01/01/reimplementing-linq-to-objects-part-21-groupby/
//string of bytes -> int -> chars conversion
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/how-to-convert-between-hexadecimal-strings-and-numeric-types
			
			]
		
		]

	DONE[

			PersonAPI
			-> HttpManager <- done
			-> JSONmanager <- done
			-> PersonManager <- done
			-> WebApiConfig <- done
			
			HTTP,JSON,Orient Managers <- done
			
			NewsAPI
			->add controller with methods from manager <-done

			
			PresentationSite	
		-> POCO to DataContract converter <- done
		-> Add WCF between Repo and Site <- done
		-> UOW bind repo to generic with as and type conversion <- done
		-> UOW bind context to every repo  <- done
		-> Specific repository for every entity <- done
		-> IRepository<T> with CRUD operations lightweight  <- done
		-> SB , Repo and UOF to different projects  <- done
		-> Emplicit implicit repos
		1-explicit repo (mostly type by merchant)
		Repo<T>() { GetItem1<T>() where T: IOne{}; ... GetItemn<T>() where T: In{}}
		2-implicit repo (mostly one type by repo instance)
		Repo<T>() where T: IOne { GetByOne(); }
		...
		Repo<T>() where T: In { GetByN(); } <- done

		Northwind
		-> change login employee get from TempData to model  <- done
		-> add complex model add  <- done
		->  Tables migration - test with repo <- done

	]
	
	GraphDbReferences[

		[Simplified overall
		()-[]->()
		Node type,reference types, reference types, directions, node type
		(Nd){-|=|..+}[Rf]-{<|>}(Nd)
		],	
		[Detailed Minimal possible 
		{
		(Node)-[Ref]->(Node)
		One type reference to same type Node
		}
		0->0
		],
		[Detailed Minimal explicit 
		(cannot be complexed with quality only with quantity of directions and types, which leads to pattern)
		{
		[NodeB]=[Ref2]=>NodeO)-[Ref1]->(NodeA)
		one type reference r1 from one type node O 
		to other type node A 
		and other type reference r2 to other type node B 
		with other direction
		}

		0
		-[r1]->A
		<=[r2]=B
		]

	]  
	