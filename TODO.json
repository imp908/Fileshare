TODO[
				
	arrange[
		-> sort unsorted of watchlist
		-> core projs arrange
			-> checkers - make base for sandbox code tamplates
			-> mvcWebPackGulpReact - gulp webpack configs and view/model decomposition
				-> mvcBulkOverall2 extendes mvcWebPackGulpReact
			-> mvcCoreCheck - core views, partial views					
			
		-> js projs rearrange 
			-> move all to folders in js SandBoxCodeTemplates
				-> leaflet_boat.js,leaflet_boatmarker.js - rotatable leaflet marker
				-> leaflet_pretty.js - leaflet pretty
				-> mapbox_pretty.js - mapbox pretty
				-> requireJsCheck - require js 
				-> modulesCheck - js modules for node 
				-> mapboxCheck, leafletCheck - map frameworks native checkers
				-> leaflet - leaflet ?working with cameras
				-> jstree - js utilities
				-> hw - js utility code
				-> BOXbundle,geoposPlanPictureOld - drag n drop partly logic
				-> boatMarkerCheck - leaflet boat plugin 
				-> leafletBulkSandbox - leaflet SB
				-> mvcReactReduxCheck - event bus
			
		no particular interest core folder - 
			mvcWebpckGulpCheck, mvcWebPackCheck, mvcReactCheck, mvcGulpCheck
			
		no particular intrest js folder - 
			webpackCheck
	]
		
	projs[
			
		-> checkers
		[
			-> async and multithreading
		]
		
		-> MSA template Core SB MVC 
		{
			progShema:[
				DDD 
				sql(ms,postgre),nosql(mongo,neo4j),amqp(rabbit+netservicebus,masstransit),
				cashing(reddis)
				
				front
				PWA progressive web app
				(angular,react,vue)
				(graphql vs REST,?mongoose)
				(?rendering,?testing)
			]

			TODO:[

			09.06.2019 4h20m -> chat dockerize 
			[
				-> run boilerplates for rem images 
				
				https://docs.microsoft.com/en-gb/aspnet/core/host-and-deploy/docker/building-net-docker-images?view=aspnetcore-2.2
				https://github.com/dotnet/dotnet-docker-samples/tree/master/aspnetapp
				https://github.com/docker/labs/blob/master/windows/windows-containers/WindowsContainers.md
				https://docs.docker.com/docker-for-windows/	
				https://docs.docker.com/docker-for-windows/troubleshoot/#limitations-of-windows-containers-for-localhost-and-published-ports
				https://docs.docker.com/v17.09/get-started/part2/#log-in-with-your-docker-id
				
			]			
				
				
				-> neworder generate data
				
				-> column to range sql 
				
				-> angular front
				
				-> heapsort check/rep
				
				-> timsort (insertion + merge)
				-> cubesort
				-> check or repai heapsort before intosort
				-> introsort (quick + heap)
				-> linked list merge sort

				-> weighted delimeter
				-> baloons arrow

				

				-> new 1-8 1-1 and 8-8 fluentAPI model
				-> basic create related API
				
				-> move checkers to crmvcsb
						
				-> mixer of colours object nodel
				-> hierarchy category,facility,item + cameras model
				-> auto/integrational tests
				-> validation, exception logging
				
				-> checkers async and multithreading
			
			]
			
			BACKLOG/ROADMAP:[
						
				-> rabbitmq
				-> mongoDb
				-> neo4j
				-> Akka
				
				-> authentication authorization
				
				-> load files/inages func ad dto front and back
				
				-> Smaple chat react front
				
				-> add flattering to automapper, 
					mapping API command property payload to whole EF object
						API{"P":{class}} -> EF{class}
					
				-> partial update of null web api content properties
				-> logging
				-> put,delete commands with url parameters
				-> controller status response and human readable responses
				
				-> use interface as controller parameter
					?is it worth or possible
				
			]

			DONE:[
			
				<- done 02.06.2019 01:53 2h -> PersonAddsPost	
				<- done 02.06.2019 14:40-14:50 10m -> get posts by person
				<- done 02.06.2019 12:14-14:40 2h30m -> get posts by blog
				<- done 02.06.2019 12:14-14:50 2h30m -> get blogs by person
				<- done 02.06.2019 15:13-15:53 40m -> person removes post
				<- done 02.06.2019 15:53-16:03 10m -> person updates post

				<- done 04.06.2019 5h -> react boardGame checker

				<- done 04.09.2019 23:53 05.09.2019 2:40 2h50m -> SignalR chat checker

				<- done 05.06.2019 2h30m -> Login and authenticate template  
				<- done 06.06.2019 7h22m -> Identity on MVC views with Identity DB mogrations
				<- done -> account page and chat room redirect routing
				<- done 07.06.2019 5h3m -> authorization token and cookie redirect on mvc startup setup
				<- done 08.06.2019 2h47m -> core view routing
				<- done 08.06.2019 2h15m -> core mvc with auth and defailt ui mvc           
					rounig with API/areas for view and controller
				{
				
					=> gen mvc 
						dotnet new mvc -o {folder} -au individual
					=> add areas 
						options.AreaViewLocationFormats.Add("API/Areas/{2}/Views/{1}/{0}.cshtml");
					=> remove compatibility 
						//.SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
					=> move MVC v,c folders
					=> include 
						@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
						from _viewimport on every layout
					=> leave basic routing in startup.cs [
					  routes.MapRoute(
						   name: "areas",
						   template: "{area:exists}/{controller=Home}/{action=Index}/{id?}"
						   );
						   
							routes.MapRoute(
								name: "default",
								template: "{controller=Home}/{action=Index}/{id?}");
					]

					=> dont include in startup.cs
					it conflict with scafoldede razor pages sigin

						services.AddAuthentication
							0 ?CookieAuthenticationDefaults


				}
				<- done 08.06.2019 4h -> move auth
				
				<- done 09.06.2019 1h45m -> signalR and auth user and messages binded
				<- done 10.06.2019 01:24 1h31m -> signalR work queued,started,finished moque
				
				<- done 12.06.2019 3h30m -> react timer sliders 
				<- done 12.06.2019 2h8m -> react todo 		
				
				<- done 13.06.2019 5h06m -> order Ef core Orders model, migration and seed Many-to-many 
				<- done 13.06.2019 5h06m -> Ef core Orders model, migration and seed Many-to-many		
				
				<- done 14.06.2019 1h20m -> cqrs add and multiple context Autofac resolve
				<- done 14.06.2019 40m -> order created
				<- done 14.06.2019 30m -> props changed				
				<- done 14.06.2019 1h20m -> order cqrs add and multiple context Autofac resolve
				<- done 14.06.2019 40m -> order created
				
				<- done 15.06.2019 40m -> order accounter interfaces
				<- done 15.06.2019 1h10m -> order new API, BLL interfaces
				<- done 15.06.2019 1h5m -> order deliverer, clenup
				<- done 15.06.2019 -> order fluent API model and migration
				<- done 15.06.2019 12:35-16:02 3h30m -> git merge crmvcsb -> master, order -> master, cleanup master,crmvcsb,order

				<- done 01.07.2019 4h -> KATAs heapsort 
				<- done 01.07.2019 1h -> test server project multiple build tasks, and integrate run
				<- done 1h -> integration tests        
				
				<- done 02.07.2019 1h -> integration tests
				<- done 02.07.2019 2h -> quicksort        
				<- done 02.07.2019 1h10m -> heapsort
				<- done 02.07.2019 1h45m -> linked nodes reverce, polindrome check


				<- done 04.0.2019 2h30m -> merge sort
				
				<- done 05.07.2019 1h -> insertion sort 
				<- done 05.07.2019 1h -> sorting tests

				<- done 07.07.2019 2h ->  insert sort rep
				<- done 07.07.2019 2h  -> heapsort above heapify
				
				<- done 15.07.2019 1h -> new order model
				<- done 16.07.2019 1h -> new order migration		
				<- done 16.07.2019 -> int ids
				
			]
			 ~87h: 10m in 15d

		}
		
		-> react SB{
				
	<- done 12.06.2019 3h30m -> react timer sliders 
	<- done 12.06.2019 2h8m -> react todo 

		}

		c++[
				
					overall
						->Employee class
						->OpenGltutorials
						->linked list reference graph
					
					SB[
			-> Moove classes from CT to SB3 

			sharefolder\Files\Repo\Mercurial\SBbr\MainBr\SB3_new_output
					]
				
		]
		
		NSQLmanager[
						
			Info[
						
				VS_ref[
					Install-Package xunit -ProjectName NSQLManagerIntegrationTests
					Install-Package moq -ProjectName NSQLManagerIntegrationTests
					Install-Package Newtonsoft.Json -ProjectName NSQLManagerIntegrationTests
					Install-Package Microsoft.AspNet.WebApi -ProjectName NSQLManagerIntegrationTests

					Install-Package NUnit -ProjectName NSQLManagerIntegrationTests
					Install-Package NUnit.ConsoleRunner -ProjectName NSQLManagerIntegrationTests
					Install-Package NUnit.Console -ProjectName NSQLManagerIntegrationTests
					Install-Package NUnit3TestAdapter  -ProjectName NSQLManagerIntegrationTests
					//OWIN install
					Install-Package Microsoft.Owin.Security.OAuth 
					Install-Package Microsoft.AspNet.Identity.EntityFramework 
					Install-Package Microsoft.Owin.Host.SystemWeb 

					//not used
					Install-Package Microsoft.AspNet.Identity.Owin 
					Install-Package Microsoft.AspNet.WebApi.Owin 
					Install-Package Microsoft.Owin.Cors 
				]
				
				Shema[
							
	
	//--------------------------------

	//Class  model <- done
	(Person) - [Authorship] -> (Commentary) <- [Comment] - (Person)
	(Person) - [Authorship] -> (News) <- [Comment] - (Person)
	(Person) - [Tagged] -> (Tag)
	(Person) - [Liked] -> (Note)
	
	//Relations model -> obsolette

	Post new tag by name, post tag id news id
	person to like

	(Person) - [Authorship] -> (Object{pinned:true})
	News //editable by hardcode string acc group to every tag
	(Person) - [Authorship] -> (Object{"pinned":"true";"published":"true"})
	Commentary
	(Person) - [Authorship] -> (Object) - [Comment{CommentLevel:0+1}] -> (Object)
	
	//updatable by person. cerated by Destiny list
	News
	{
		[not updatable from POST,changes while note POST update]
		public Person author_ { get; set; }

	}				
	//Author never edited from POSTs
	//updatable from UOW
	Commentary
	
	if "Name":null -> если null оставляем как в базе
	if "Name":"" -> если явное "" empty перезаписываем в базе
	
	if author_:null or "" -> не обноялем напрямую,
	только из пользователя при изменнеии объекта
	
	personReturn
	{ 
	  "GUID": "ba124b8e-9857-11e7-8119-005056813668",
	  "division": "Отдел поддержки прикладных систем",
	  "PGUID": "c1b0ff45-5cb1-11e7-8117-005056813668",
	  "phone": "1312",
	  "mail": "Neprintsevia@nspk.ru",
	  "Name": "Непринцев Илья Александрович",  
	  "shortFName": "Непринцев И. А.",
	  "description": "Главный специалист",
	  "itemTitleColor": "rgb(44,50,124)",
	  "templateName": "PersonTemplate",
	  "birthday": "09.03",
	  "colorClass": "c-dit",
	  "departmentName": "Департамент ИТ",
	  "login": "Neprintsevia"
	}
	
	NoteReturn
	{
		
		author personReturn_ {get;set;}
		
		note_ {get;set;}
		
		commentaryCount {get;set;}
		likesCount {get;set;}
		
	}
	
	//--------------------------------

							]						
							
			]
		
		]
		
		qiuiz[

			//return all published
			POST
			http://msk1-vm-ovisp01:8184/api/Quiz
			{"monthDepth":""}

			months depth  in the past 
			{"monthDepth":"-5"}

		]
		
		ProofOfConcept[
			->NOSQL
			[
				-> Linq from custom object to custom string[
					<- done for equality for sample properties int,bool,string
				]
				-> custom expression from nodes concat
				-> Neo4j and Mongo repos add
			]
			-> Polinom Parse
			[
				parse *^/ to expressions and add priorities for exprs
			]
			-> Command line Console parameters parse app dll -> to SB
			-> Multithread socket message ping pong -> to SB
			-> Pluggin/addon architecture -> to SB
			-> web api null/empty input partial update
			-> kibana
		-> influx db
		]
	
	]
	
	read[

		intrinsic ienumerable ienumerator
		finilizer 
		disposable
		using null
		values in stack
		async state machine
		left join link
		partially sorted list search
		
		Intrinsic dictionary
https://en.wikipedia.org/wiki/Memoization
https://en.wikipedia.org/wiki/Perfect_hash_function
https://en.wikipedia.org/wiki/B-tree
https://en.wikipedia.org/wiki/Hash_table
https://blog.markvincze.com/back-to-basics-dictionary-part-1/#separatechaining
https://blog.markvincze.com/back-to-basics-dictionary-part-2-net-implementation/
		LINQ deferred
		TPL async/multithread
		[
		
threading[

interlocked:[
atomic actions on variables 
(increment,decrement,add,
exchange(retunrs original value, atomicaly sets new), 
memorybarier(cur thred proc cannot reorder mem instr before membar call))
]
manualreseteevent[
mre
WaitOne() block, Set() release, Reset() reset to blocking;

thread which use mre.WaitOne() blocked until mew.Set() is called.
then all threads unblocked until mre.Reset() is called

thread calling .Reset() - controlling mre
]
menualeventresetslim[
used when event not leaves process boundaries and wait time is relatively small
	.Dispose() -> when all threads using mres completed
	.Reset() -> when no threads using mres		
]
monitor[
locking critical sections of code
Monitor.Enter(var);
Monitor.Exit(var);

private object objLock = new Object();
lock(objLock){

}

> lock any object on demand
> unbound can be called directly from any context		

]
mutex[
private xtatic Mutext mtx = new Mutex();

mtx.WaitOne();

mtx.ReleaseMutex();

mtx.Dispose();

> must be disposed
> WaitOne(seconds) false if no other thread aquired ownership
	, then must not call ReleaseMutex but return to calling thread
> enforces thread identity can be release only by thread acquired it
> WaitOne calls count ==  ReleaseMutex calls count in method

]

]

async:
https://devblogs.microsoft.com/pfxteam/executioncontext-vs-synchronizationcontext/
https://devblogs.microsoft.com/premier-developer/dissecting-the-async-methods-in-c/
https://weblogs.asp.net/dixin/understanding-c-sharp-async-await-1-compilation
https://blog.stephencleary.com/2013/11/there-is-no-thread.html
https://msdn.microsoft.com/en-us/magazine/jj991977.aspx
await inside lock lead to deadlocks:
lock(){
	await 
}

?object lock types

		]
		GC
		SQL[
//Joins Hash, merge
https://blogs.msdn.microsoft.com/craigfr/tag/joins/
https://www.sqlshack.com/hash-join-execution-internals/
https://sqlity.net/en/1490/a-join-a-day-the-hash-join/

CTE, 
Database design indexes
Manage Monitore and Tune Execution Plans
Internals and Architecture
https://docs.microsoft.com/en-us/sql/relational-databases/performance/execution-plans?view=sql-server-2017

analysing a query
https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-2008-r2/ms191227(v=sql.105)

https://blogs.oracle.com/oraclemagazine/on-transaction-isolation-levels

https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/snapshot-isolation-in-sql-server

https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch
https://en.wikipedia.org/wiki/B-tree
https://en.wikipedia.org/wiki/Hash_table
https://docs.microsoft.com/en-us/sql/relational-databases/indexes/indexes?view=sql-server-2017
https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-2008-r2/ms177443%28v%3dsql.105%29
https://www.red-gate.com/simple-talk/sql/t-sql-programming/questions-about-t-sql-transaction-isolation-levels-you-were-too-shy-to-ask/
https://docs.microsoft.com/en-us/sql/relational-databases/ghost-record-cleanup-process-guide?view=sql-server-2017
]
		algorithms
		architecture
		lock resolve
HTTP
https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol
REST
https://en.wikipedia.org/wiki/Representational_state_transfer

		db locking types;
		optimistic, pessimistic;
MVC5 lifecycle
https://www.dotnettricks.com/learn/mvc/aspnet-mvc-request-life-cycle
https://docs.microsoft.com/en-us/previous-versions/aspnet/bb470252(v=vs.100)
IPC_and_synchronization
[
semaphore,mutex,monitor,barier
https://en.wikipedia.org/wiki/Inter-process_communication
https://en.wikipedia.org/wiki/Mutual_exclusion
https://en.wikipedia.org/wiki/Semaphore_(programming)
https://en.wikipedia.org/wiki/Monitor_(synchronization)
https://en.wikipedia.org/wiki/Lock_(computer_science)
https://en.wikipedia.org/wiki/Concurrent_computing
]
LINQ 
https://linqsamples.com/tutorials/deferred-and-immediate-execution-in-linq
http://linq101.nilzorblog.com/linq101-lambda.php
https://codeblog.jonskeet.uk/2011/01/01/reimplementing-linq-to-objects-part-21-groupby/
//string of bytes -> int -> chars conversion
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/how-to-convert-between-hexadecimal-strings-and-numeric-types
	
	]

]

DONE[

		PersonAPI
		-> HttpManager <- done
		-> JSONmanager <- done
		-> PersonManager <- done
		-> WebApiConfig <- done
		
		HTTP,JSON,Orient Managers <- done
		
		NewsAPI
		->add controller with methods from manager <-done

		
		PresentationSite	
	-> POCO to DataContract converter <- done
	-> Add WCF between Repo and Site <- done
	-> UOW bind repo to generic with as and type conversion <- done
	-> UOW bind context to every repo  <- done
	-> Specific repository for every entity <- done
	-> IRepository<T> with CRUD operations lightweight  <- done
	-> SB , Repo and UOF to different projects  <- done
	-> Emplicit implicit repos
	1-explicit repo (mostly type by merchant)
	Repo<T>() { GetItem1<T>() where T: IOne{}; ... GetItemn<T>() where T: In{}}
	2-implicit repo (mostly one type by repo instance)
	Repo<T>() where T: IOne { GetByOne(); }
	...
	Repo<T>() where T: In { GetByN(); } <- done

	Northwind
	-> change login employee get from TempData to model  <- done
	-> add complex model add  <- done
	->  Tables migration - test with repo <- done

]

GraphDbReferences[

	[Simplified overall
	()-[]->()
	Node type,reference types, reference types, directions, node type
	(Nd){-|=|..+}[Rf]-{<|>}(Nd)
	],	
	[Detailed Minimal possible 
	{
	(Node)-[Ref]->(Node)
	One type reference to same type Node
	}
	0->0
	],
	[Detailed Minimal explicit 
	(cannot be complexed with quality only with quantity of directions and types, which leads to pattern)
	{
	[NodeB]=[Ref2]=>(NodeO)-[Ref1]->(NodeA)
	one type reference r1 from one type node O 
	to other type node A 
	and other type reference r2 to other type node B 
	with other direction
	}

	0
	-[r1]->A
	<=[r2]=B
	]

]
	