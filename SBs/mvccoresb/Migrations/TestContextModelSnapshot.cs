// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mvccoresb.Infrastructure.EF;

namespace mvccoresb.Migrations
{
    [DbContext(typeof(TestContext))]
    partial class TestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("mvccoresb.Domain.GeoModel.GeoCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FacilityId");

                    b.Property<Guid?>("GeoCategoryId");

                    b.Property<Guid>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("GeoCategoryId");

                    b.ToTable("GeoCategory");
                });

            modelBuilder.Entity("mvccoresb.Domain.GeoModel.GeoFacility", b =>
                {
                    b.Property<Guid>("FacilityId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("LayoutId");

                    b.HasKey("FacilityId");

                    b.HasIndex("LayoutId");

                    b.ToTable("GeoFacility");
                });

            modelBuilder.Entity("mvccoresb.Domain.GeoModel.GeoLayout", b =>
                {
                    b.Property<Guid>("LayoutId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("PlanId");

                    b.HasKey("LayoutId");

                    b.HasIndex("PlanId");

                    b.ToTable("GeoLayout");
                });

            modelBuilder.Entity("mvccoresb.Domain.GeoModel.GeoPlan", b =>
                {
                    b.Property<Guid>("PlanId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("PlanId");

                    b.ToTable("GeoPlan");
                });

            modelBuilder.Entity("mvccoresb.Domain.GeoModel.ServiceType", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ServiceID");

                    b.Property<Guid?>("GeoCategoryId");

                    b.Property<Guid?>("GeoFacilityFacilityId");

                    b.Property<string>("Name");

                    b.HasKey("ServiceId");

                    b.HasIndex("GeoCategoryId");

                    b.HasIndex("GeoFacilityFacilityId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("mvccoresb.Domain.TestModels.BlogEF", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Rating");

                    b.Property<string>("Url");

                    b.HasKey("BlogId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("mvccoresb.Domain.TestModels.BlogImage", b =>
                {
                    b.Property<int>("BlogImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogId");

                    b.Property<string>("Caption");

                    b.Property<byte[]>("Image");

                    b.HasKey("BlogImageId");

                    b.HasIndex("BlogId")
                        .IsUnique();

                    b.ToTable("BlogImage");
                });

            modelBuilder.Entity("mvccoresb.Domain.TestModels.InstructorEF", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("QualityGrade");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("mvccoresb.Domain.TestModels.PersonEF", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PersonID");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsConcurrencyToken();

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PersonEF");
                });

            modelBuilder.Entity("mvccoresb.Domain.TestModels.PostEF", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogId");

                    b.Property<string>("Content");

                    b.Property<string>("Title");

                    b.HasKey("PostId");

                    b.HasIndex("BlogId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("mvccoresb.Domain.TestModels.PostTagEF", b =>
                {
                    b.Property<int>("PostId");

                    b.Property<string>("TagId");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTagEF");
                });

            modelBuilder.Entity("mvccoresb.Domain.TestModels.TagEF", b =>
                {
                    b.Property<string>("TagId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("TagId");

                    b.ToTable("TagEF");
                });

            modelBuilder.Entity("mvccoresb.Domain.TestModels.StudentEF", b =>
                {
                    b.HasBaseType("mvccoresb.Domain.TestModels.PersonEF");

                    b.Property<DateTime>("EnrollmentDate");

                    b.HasDiscriminator().HasValue("StudentEF");
                });

            modelBuilder.Entity("mvccoresb.Domain.GeoModel.GeoCategory", b =>
                {
                    b.HasOne("mvccoresb.Domain.GeoModel.GeoFacility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mvccoresb.Domain.GeoModel.GeoCategory")
                        .WithMany("Children")
                        .HasForeignKey("GeoCategoryId");
                });

            modelBuilder.Entity("mvccoresb.Domain.GeoModel.GeoFacility", b =>
                {
                    b.HasOne("mvccoresb.Domain.GeoModel.GeoLayout", "Layout")
                        .WithMany()
                        .HasForeignKey("LayoutId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mvccoresb.Domain.GeoModel.GeoLayout", b =>
                {
                    b.HasOne("mvccoresb.Domain.GeoModel.GeoPlan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mvccoresb.Domain.GeoModel.ServiceType", b =>
                {
                    b.HasOne("mvccoresb.Domain.GeoModel.GeoCategory")
                        .WithMany("Services")
                        .HasForeignKey("GeoCategoryId");

                    b.HasOne("mvccoresb.Domain.GeoModel.GeoFacility")
                        .WithMany("Services")
                        .HasForeignKey("GeoFacilityFacilityId");
                });

            modelBuilder.Entity("mvccoresb.Domain.TestModels.BlogImage", b =>
                {
                    b.HasOne("mvccoresb.Domain.TestModels.BlogEF", "Blog")
                        .WithOne("BlogImage")
                        .HasForeignKey("mvccoresb.Domain.TestModels.BlogImage", "BlogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mvccoresb.Domain.TestModels.PostEF", b =>
                {
                    b.HasOne("mvccoresb.Domain.TestModels.BlogEF", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mvccoresb.Domain.TestModels.PostTagEF", b =>
                {
                    b.HasOne("mvccoresb.Domain.TestModels.PostEF", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mvccoresb.Domain.TestModels.TagEF", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
